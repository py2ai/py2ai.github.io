<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://www.pyshine.com/atom.xml" rel="self" type="application/atom+xml" /><link href="https://www.pyshine.com/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-10-31T10:06:08+00:00</updated><id>https://www.pyshine.com/atom.xml</id><title type="html">PyShine</title><subtitle>AI tutorials, insights, and resources on artificial intelligence and machine learning in Python. Learn the latest techniques and best practices.</subtitle><author><name>PyShine Team</name></author><entry><title type="html">Mini Paint (Smooth Circular Brush) in Python</title><link href="https://www.pyshine.com/Paint-Brush-Python/" rel="alternate" type="text/html" title="Mini Paint (Smooth Circular Brush) in Python" /><published>2025-10-31T00:00:00+00:00</published><updated>2025-10-31T00:00:00+00:00</updated><id>https://www.pyshine.com/Paint-Brush-Python</id><content type="html" xml:base="https://www.pyshine.com/Paint-Brush-Python/"><![CDATA[<h1 id="Ô∏è-mini-paint-tutorial-smooth-circular-brush">üñåÔ∏è Mini Paint Tutorial (Smooth Circular Brush)</h1>

<h3 id="educational-python-project--create-an-interactive-painting-app">Educational Python Project ‚Äì Create an Interactive Painting App</h3>

<p>This tutorial walks through building a <strong>Mini Paint application</strong> using <strong>Python and Pygame</strong>. The app allows users to <strong>draw with smooth circular brushes</strong>, choose from multiple colors, and select different brush sizes.</p>

<hr />

<h2 id="features">Features</h2>

<ul>
  <li>‚úÖ 7 colors</li>
  <li>‚úÖ 4 brush sizes</li>
  <li>‚úÖ Smooth, circle-based strokes</li>
  <li>‚úÖ Compact toolbar (portrait 400x900)</li>
</ul>

<hr />

<h2 id="requirements">Requirements</h2>

<ul>
  <li>Python 3.x</li>
  <li>Pygame library</li>
</ul>

<p>Install Pygame if you don‚Äôt have it:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>pygame
</code></pre></div></div>

<hr />

<h2 id="step-1-setup-pygame-window">Step 1: Setup Pygame Window</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pygame</span><span class="p">,</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="nn">math</span>

<span class="n">pygame</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>

<span class="c1"># Screen setup
</span><span class="n">W</span><span class="p">,</span> <span class="n">H</span> <span class="o">=</span> <span class="mi">400</span><span class="p">,</span> <span class="mi">900</span>
<span class="n">S</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_mode</span><span class="p">((</span><span class="n">W</span><span class="p">,</span> <span class="n">H</span><span class="p">))</span>
<span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s">"Mini Paint - Smooth Circles"</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="step-2-define-colors-and-brush-sizes">Step 2: Define Colors and Brush Sizes</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>     <span class="c1"># Red
</span>    <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">165</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>   <span class="c1"># Orange
</span>    <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>   <span class="c1"># Yellow
</span>    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>     <span class="c1"># Green
</span>    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span>     <span class="c1"># Blue
</span>    <span class="p">(</span><span class="mi">75</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">130</span><span class="p">),</span>    <span class="c1"># Indigo
</span>    <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span>  <span class="c1"># White (eraser)
</span><span class="p">]</span>

<span class="n">brush_sizes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">24</span><span class="p">]</span>
<span class="n">current_color</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">current_size</span> <span class="o">=</span> <span class="n">brush_sizes</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<hr />

<h2 id="step-3-setup-toolbar">Step 3: Setup Toolbar</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">toolbar_height</span> <span class="o">=</span> <span class="mi">120</span>
<span class="n">color_buttons</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">size_buttons</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1"># Color buttons
</span><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">colors</span><span class="p">):</span>
    <span class="n">rect</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">Rect</span><span class="p">(</span><span class="mi">10</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span>
    <span class="n">color_buttons</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">rect</span><span class="p">,</span> <span class="n">c</span><span class="p">))</span>

<span class="c1"># Size buttons
</span><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">size</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">brush_sizes</span><span class="p">):</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">40</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">90</span>
    <span class="n">y</span> <span class="o">=</span> <span class="mi">75</span>
    <span class="n">size_buttons</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">size</span><span class="p">))</span>
</code></pre></div></div>

<hr />

<h2 id="step-4-create-smooth-brush-function">Step 4: Create Smooth Brush Function</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">draw_smooth_circle_line</span><span class="p">(</span><span class="n">surface</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">radius</span><span class="p">):</span>
    <span class="n">x1</span><span class="p">,</span> <span class="n">y1</span> <span class="o">=</span> <span class="n">start</span>
    <span class="n">x2</span><span class="p">,</span> <span class="n">y2</span> <span class="o">=</span> <span class="n">end</span>
    <span class="n">dx</span> <span class="o">=</span> <span class="n">x2</span> <span class="o">-</span> <span class="n">x1</span>
    <span class="n">dy</span> <span class="o">=</span> <span class="n">y2</span> <span class="o">-</span> <span class="n">y1</span>
    <span class="n">distance</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="n">hypot</span><span class="p">(</span><span class="n">dx</span><span class="p">,</span> <span class="n">dy</span><span class="p">)))</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">distance</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">x1</span> <span class="o">+</span> <span class="n">dx</span> <span class="o">*</span> <span class="n">i</span> <span class="o">/</span> <span class="n">distance</span><span class="p">)</span>
        <span class="n">y</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">y1</span> <span class="o">+</span> <span class="n">dy</span> <span class="o">*</span> <span class="n">i</span> <span class="o">/</span> <span class="n">distance</span><span class="p">)</span>
        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">surface</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="n">radius</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="step-5-main-loop">Step 5: Main Loop</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">drawing</span> <span class="o">=</span> <span class="bp">False</span>
<span class="n">last_pos</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">time</span><span class="p">.</span><span class="n">Clock</span><span class="p">()</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">pygame</span><span class="p">.</span><span class="n">event</span><span class="p">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">e</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="n">pygame</span><span class="p">.</span><span class="n">quit</span><span class="p">()</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>

        <span class="k">if</span> <span class="n">e</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">MOUSEBUTTONDOWN</span><span class="p">:</span>
            <span class="n">mx</span><span class="p">,</span> <span class="n">my</span> <span class="o">=</span> <span class="n">e</span><span class="p">.</span><span class="n">pos</span>
            <span class="c1"># Select color
</span>            <span class="k">for</span> <span class="n">rect</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">color_buttons</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">rect</span><span class="p">.</span><span class="n">collidepoint</span><span class="p">(</span><span class="n">mx</span><span class="p">,</span> <span class="n">my</span><span class="p">):</span>
                    <span class="n">current_color</span> <span class="o">=</span> <span class="n">c</span>
            <span class="c1"># Select brush size
</span>            <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">size_buttons</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">mx</span> <span class="o">-</span> <span class="n">x</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">my</span> <span class="o">-</span> <span class="n">y</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">s</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">:</span>
                    <span class="n">current_size</span> <span class="o">=</span> <span class="n">s</span>
            <span class="c1"># Start drawing
</span>            <span class="k">if</span> <span class="n">my</span> <span class="o">&gt;</span> <span class="n">toolbar_height</span><span class="p">:</span>
                <span class="n">drawing</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="n">last_pos</span> <span class="o">=</span> <span class="n">e</span><span class="p">.</span><span class="n">pos</span>

        <span class="k">if</span> <span class="n">e</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">MOUSEBUTTONUP</span><span class="p">:</span>
            <span class="n">drawing</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="n">last_pos</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="c1"># Drawing
</span>    <span class="k">if</span> <span class="n">drawing</span><span class="p">:</span>
        <span class="n">mx</span><span class="p">,</span> <span class="n">my</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">mouse</span><span class="p">.</span><span class="n">get_pos</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">my</span> <span class="o">&gt;</span> <span class="n">toolbar_height</span> <span class="ow">and</span> <span class="n">last_pos</span><span class="p">:</span>
            <span class="n">draw_smooth_circle_line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">current_color</span><span class="p">,</span> <span class="n">last_pos</span><span class="p">,</span> <span class="p">(</span><span class="n">mx</span><span class="p">,</span> <span class="n">my</span><span class="p">),</span> <span class="n">current_size</span><span class="p">)</span>
        <span class="n">last_pos</span> <span class="o">=</span> <span class="p">(</span><span class="n">mx</span><span class="p">,</span> <span class="n">my</span><span class="p">)</span>

    <span class="c1"># Toolbar background
</span>    <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">W</span><span class="p">,</span> <span class="n">toolbar_height</span><span class="p">))</span>

    <span class="c1"># Draw color buttons
</span>    <span class="k">for</span> <span class="n">rect</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">color_buttons</span><span class="p">:</span>
        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">rect</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="n">current_color</span><span class="p">:</span>
            <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span> <span class="n">rect</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

    <span class="c1"># Draw brush size selectors
</span>    <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">size_buttons</span><span class="p">:</span>
        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="n">s</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="n">current_size</span><span class="p">:</span>
            <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="n">s</span> <span class="o">+</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

    <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">flip</span><span class="p">()</span>
    <span class="n">clock</span><span class="p">.</span><span class="n">tick</span><span class="p">(</span><span class="mi">120</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="complete-python-code">Complete Python Code</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pygame</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">math</span>
<span class="n">pygame</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>

<span class="c1"># Screen setup 
</span><span class="n">W</span><span class="p">,</span> <span class="n">H</span> <span class="o">=</span> <span class="mi">400</span><span class="p">,</span> <span class="mi">900</span>
<span class="n">S</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_mode</span><span class="p">((</span><span class="n">W</span><span class="p">,</span> <span class="n">H</span><span class="p">))</span>
<span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s">"Mini Paint - Smooth Circles"</span><span class="p">)</span>

<span class="c1"># Colors
</span><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>     <span class="c1"># Red
</span>    <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">165</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>   <span class="c1"># Orange
</span>    <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>   <span class="c1"># Yellow
</span>    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>     <span class="c1"># Green
</span>    <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span>     <span class="c1"># Blue
</span>    <span class="p">(</span><span class="mi">75</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">130</span><span class="p">),</span>    <span class="c1"># Indigo
</span>    <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span>  <span class="c1"># White (eraser)
</span><span class="p">]</span>
<span class="n">brush_sizes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">24</span><span class="p">]</span>
<span class="n">current_color</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">current_size</span> <span class="o">=</span> <span class="n">brush_sizes</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="c1"># Toolbar setup 
</span><span class="n">toolbar_height</span> <span class="o">=</span> <span class="mi">120</span>
<span class="n">color_buttons</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">size_buttons</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1"># Color button positions
</span><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">colors</span><span class="p">):</span>
    <span class="n">rect</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">Rect</span><span class="p">(</span><span class="mi">10</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span>
    <span class="n">color_buttons</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">rect</span><span class="p">,</span> <span class="n">c</span><span class="p">))</span>

<span class="c1"># Size buttons (circles)
</span><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">size</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">brush_sizes</span><span class="p">):</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">40</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">90</span>
    <span class="n">y</span> <span class="o">=</span> <span class="mi">75</span>
    <span class="n">size_buttons</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">size</span><span class="p">))</span>

<span class="n">drawing</span> <span class="o">=</span> <span class="bp">False</span>
<span class="n">last_pos</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">time</span><span class="p">.</span><span class="n">Clock</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">draw_smooth_circle_line</span><span class="p">(</span><span class="n">surface</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">radius</span><span class="p">):</span>
    <span class="s">"""Draw smooth brush stroke using overlapping circles"""</span>
    <span class="n">x1</span><span class="p">,</span> <span class="n">y1</span> <span class="o">=</span> <span class="n">start</span>
    <span class="n">x2</span><span class="p">,</span> <span class="n">y2</span> <span class="o">=</span> <span class="n">end</span>
    <span class="n">dx</span> <span class="o">=</span> <span class="n">x2</span> <span class="o">-</span> <span class="n">x1</span>
    <span class="n">dy</span> <span class="o">=</span> <span class="n">y2</span> <span class="o">-</span> <span class="n">y1</span>
    <span class="n">distance</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="n">hypot</span><span class="p">(</span><span class="n">dx</span><span class="p">,</span> <span class="n">dy</span><span class="p">)))</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">distance</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">x1</span> <span class="o">+</span> <span class="n">dx</span> <span class="o">*</span> <span class="n">i</span> <span class="o">/</span> <span class="n">distance</span><span class="p">)</span>
        <span class="n">y</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">y1</span> <span class="o">+</span> <span class="n">dy</span> <span class="o">*</span> <span class="n">i</span> <span class="o">/</span> <span class="n">distance</span><span class="p">)</span>
        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">surface</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="n">radius</span><span class="p">)</span>

<span class="c1"># Main Loop
</span><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">pygame</span><span class="p">.</span><span class="n">event</span><span class="p">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">e</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="n">pygame</span><span class="p">.</span><span class="n">quit</span><span class="p">();</span> <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>

        <span class="c1"># Mouse down
</span>        <span class="k">if</span> <span class="n">e</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">MOUSEBUTTONDOWN</span><span class="p">:</span>
            <span class="n">mx</span><span class="p">,</span> <span class="n">my</span> <span class="o">=</span> <span class="n">e</span><span class="p">.</span><span class="n">pos</span>
            <span class="c1"># Select color
</span>            <span class="k">for</span> <span class="n">rect</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">color_buttons</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">rect</span><span class="p">.</span><span class="n">collidepoint</span><span class="p">(</span><span class="n">mx</span><span class="p">,</span> <span class="n">my</span><span class="p">):</span>
                    <span class="n">current_color</span> <span class="o">=</span> <span class="n">c</span>
            <span class="c1"># Select brush size
</span>            <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">size_buttons</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">mx</span> <span class="o">-</span> <span class="n">x</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">my</span> <span class="o">-</span> <span class="n">y</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">s</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">:</span>
                    <span class="n">current_size</span> <span class="o">=</span> <span class="n">s</span>
            <span class="c1"># Start drawing
</span>            <span class="k">if</span> <span class="n">my</span> <span class="o">&gt;</span> <span class="n">toolbar_height</span><span class="p">:</span>
                <span class="n">drawing</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="n">last_pos</span> <span class="o">=</span> <span class="n">e</span><span class="p">.</span><span class="n">pos</span>

        <span class="k">if</span> <span class="n">e</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">MOUSEBUTTONUP</span><span class="p">:</span>
            <span class="n">drawing</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="n">last_pos</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="c1"># Drawing with smooth circular brush 
</span>    <span class="k">if</span> <span class="n">drawing</span><span class="p">:</span>
        <span class="n">mx</span><span class="p">,</span> <span class="n">my</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">mouse</span><span class="p">.</span><span class="n">get_pos</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">my</span> <span class="o">&gt;</span> <span class="n">toolbar_height</span> <span class="ow">and</span> <span class="n">last_pos</span><span class="p">:</span>
            <span class="n">draw_smooth_circle_line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">current_color</span><span class="p">,</span> <span class="n">last_pos</span><span class="p">,</span> <span class="p">(</span><span class="n">mx</span><span class="p">,</span> <span class="n">my</span><span class="p">),</span> <span class="n">current_size</span><span class="p">)</span>
        <span class="n">last_pos</span> <span class="o">=</span> <span class="p">(</span><span class="n">mx</span><span class="p">,</span> <span class="n">my</span><span class="p">)</span>

    <span class="c1"># Toolbar background 
</span>    <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="p">(</span><span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">40</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">W</span><span class="p">,</span> <span class="n">toolbar_height</span><span class="p">))</span>

    <span class="c1"># Draw color buttons
</span>    <span class="k">for</span> <span class="n">rect</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">color_buttons</span><span class="p">:</span>
        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">rect</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="n">current_color</span><span class="p">:</span>
            <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span> <span class="n">rect</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

    <span class="c1"># Draw brush size selectors
</span>    <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">size_buttons</span><span class="p">:</span>
        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="n">s</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="n">current_size</span><span class="p">:</span>
            <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="n">s</span> <span class="o">+</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

    <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">flip</span><span class="p">()</span>
    <span class="n">clock</span><span class="p">.</span><span class="n">tick</span><span class="p">(</span><span class="mi">120</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>You now have a working Mini Paint application with smooth circular brushes, multiple colors, and variable brush sizes! This is a fun project to practice <strong>interactive GUI programming in Python using Pygame</strong>.</p>

<p>Enjoy painting!</p>]]></content><author><name>PyShine Team</name></author><category term="mini-paint" /><category term="pygame" /><category term="interactive-drawing" /><category term="python-tutorial" /><summary type="html"><![CDATA[Build a simple interactive painting app with smooth circular brushes using Python and Pygame.]]></summary></entry><entry><title type="html">Gravitational Time Dilation Simulation in Python</title><link href="https://www.pyshine.com/Time-Runs-Differently-Under-Gravity/" rel="alternate" type="text/html" title="Gravitational Time Dilation Simulation in Python" /><published>2025-10-30T00:00:00+00:00</published><updated>2025-10-30T00:00:00+00:00</updated><id>https://www.pyshine.com/Time-Runs-Differently-Under-Gravity</id><content type="html" xml:base="https://www.pyshine.com/Time-Runs-Differently-Under-Gravity/"><![CDATA[<h1 id="gravitational-time-dilation-simulation-with-pygame">Gravitational Time Dilation Simulation with Pygame</h1>

<h3 id="educational-python-project--visualize-how-gravity-affects-time">Educational Python Project ‚Äì Visualize How Gravity Affects Time</h3>

<p>This tutorial walks through building an <strong>interactive Gravitational Time Dilation Simulation</strong> using <strong>Python and Pygame</strong>. The simulation demonstrates how <strong>time passes differently under varying gravitational strengths</strong>, comparing a clock at Earth‚Äôs surface to a clock under stronger or weaker gravity.</p>

<h2 id="table-of-contents">Table of Contents</h2>
<ul>
  <li><a href="#overview">Overview</a></li>
  <li><a href="#theory-gravitational-time-dilation">Theory: Gravitational Time Dilation</a></li>
  <li><a href="#pygame-setup">Pygame Setup</a></li>
  <li><a href="#clock-display">Clock Display</a></li>
  <li><a href="#gravity-adjustment">Gravity Adjustment</a></li>
  <li><a href="#matplotlib-live-plot">Matplotlib Live Plot</a></li>
  <li><a href="#relative-year-info">Relative Year Info</a></li>
  <li><a href="#complete-python-code">Complete Python Code</a></li>
  <li><a href="#how-to-run">How to Run</a></li>
  <li><a href="#key-learnings">Key Learnings</a></li>
  <li><a href="#further-ideas">Further Ideas</a></li>
</ul>

<h2 id="overview">Overview</h2>

<p>This project simulates <strong>gravitational time dilation</strong> using Python. You can interactively increase or decrease gravity and watch how the time on the gravity clock diverges from the Earth clock.</p>

<h2 id="theory-gravitational-time-dilation">Theory: Gravitational Time Dilation</h2>

<p>According to general relativity, <strong>time passes differently under different gravitational potentials</strong>. A clock closer to a massive object ticks slower than a clock further away. The simulation uses the formula:</p>

\[\text{time factor} = \frac{1}{\sqrt{1 - \frac{2 G M}{r c^2}}}\]

<p>Where:</p>
<ul>
  <li>(G) is the gravitational constant</li>
  <li>(M) is the mass of the object (Earth)</li>
  <li>(r) is the distance from the center of the mass</li>
  <li>(c) is the speed of light</li>
</ul>

<h2 id="pygame-setup">Pygame Setup</h2>

<p>We initialize a Pygame window and define fonts for various display elements:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pygame</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>
<span class="n">WIDTH</span><span class="p">,</span> <span class="n">HEIGHT</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">280</span>
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_mode</span><span class="p">((</span><span class="n">WIDTH</span><span class="p">,</span> <span class="n">HEIGHT</span><span class="p">))</span>
<span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s">"Gravitational Time Dilation Clock"</span><span class="p">)</span>
</code></pre></div></div>

<p>Fonts are adjustable at the top:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">FONT_SIZE_INFO</span> <span class="o">=</span> <span class="mi">28</span>
<span class="n">FONT_SIZE_CLOCK</span> <span class="o">=</span> <span class="mi">50</span>
<span class="n">FONT_SIZE_SMALL</span> <span class="o">=</span> <span class="mi">40</span>
<span class="n">font_info</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">font</span><span class="p">.</span><span class="n">SysFont</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">FONT_SIZE_INFO</span><span class="p">)</span>
<span class="n">font_clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">font</span><span class="p">.</span><span class="n">SysFont</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">FONT_SIZE_CLOCK</span><span class="p">)</span>
<span class="n">font_small</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">font</span><span class="p">.</span><span class="n">SysFont</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">FONT_SIZE_SMALL</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="clock-display">Clock Display</h2>

<p>The simulation shows two clocks:</p>
<ul>
  <li><strong>Earth Clock</strong>: baseline reference</li>
  <li><strong>Gravity Clock</strong>: affected by gravity changes</li>
</ul>

<h2 id="gravity-adjustment">Gravity Adjustment</h2>

<p>You can use the <strong>UP and DOWN arrow keys</strong> to increase or decrease gravity. The clocks update in real-time, and the relative rate is displayed.</p>

<h2 id="matplotlib-live-plot">Matplotlib Live Plot</h2>

<p>A live Matplotlib plot shows the <strong>relative clock rate vs gravity</strong>. The plot features:</p>
<ul>
  <li>Blue line with sky-blue dots</li>
  <li>Gradient shadow under the curve</li>
  <li>Dynamic Y-axis</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">line</span><span class="p">,</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">([],</span> <span class="p">[],</span> <span class="n">color</span><span class="o">=</span><span class="s">'blue'</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="s">'o'</span><span class="p">,</span> <span class="n">markerfacecolor</span><span class="o">=</span><span class="s">'skyblue'</span><span class="p">,</span> <span class="n">markersize</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="s">'-'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="relative-year-info">Relative Year Info</h2>

<p>The simulation also shows:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 Year @ Earth = N Year @ Gravity Clock
</code></pre></div></div>

<p>This uses the <code class="language-plaintext highlighter-rouge">relative_rate</code> variable to dynamically display how 1 Earth year corresponds to a different duration on the gravity clock.</p>

<h2 id="complete-python-code">Complete Python Code</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pygame</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="c1">#  Constants 
</span><span class="n">G</span> <span class="o">=</span> <span class="mf">6.67430e-11</span>           <span class="c1"># Gravitational constant (m¬≥/kg¬∑s¬≤)
</span><span class="n">c</span> <span class="o">=</span> <span class="mi">299792458</span>             <span class="c1"># Speed of light (m/s)
</span><span class="n">M</span> <span class="o">=</span> <span class="mf">5.972e24</span>              <span class="c1"># Mass of Earth (kg)
</span><span class="n">R_earth</span> <span class="o">=</span> <span class="mf">6.371e6</span>         <span class="c1"># Radius of Earth (m)
</span><span class="n">g_surface</span> <span class="o">=</span> <span class="n">G</span> <span class="o">*</span> <span class="n">M</span> <span class="o">/</span> <span class="n">R_earth</span><span class="o">**</span><span class="mi">2</span>  <span class="c1"># Surface gravity of Earth (m/s¬≤)
</span><span class="n">r_s</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">G</span> <span class="o">*</span> <span class="n">M</span> <span class="o">/</span> <span class="n">c</span><span class="o">**</span><span class="mi">2</span>    <span class="c1"># Schwarzschild radius for Earth (m)
</span><span class="n">gf_earth</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">math</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">G</span><span class="o">*</span><span class="n">M</span><span class="o">/</span><span class="p">(</span><span class="n">R_earth</span><span class="o">*</span><span class="n">c</span><span class="o">**</span><span class="mi">2</span><span class="p">))</span>  <span class="c1"># Time dilation factor at Earth surface
</span><span class="n">SECONDS_PER_EARTH_YEAR</span> <span class="o">=</span> <span class="mf">365.25</span> <span class="o">*</span> <span class="mi">24</span> <span class="o">*</span> <span class="mi">3600</span>  <span class="c1"># Seconds in one Earth year
</span>
<span class="c1">#  Adjustable font sizes 
</span><span class="n">FONT_SIZE_INFO</span> <span class="o">=</span> <span class="mi">28</span>       <span class="c1"># Info line font
</span><span class="n">FONT_SIZE_CLOCK</span> <span class="o">=</span> <span class="mi">50</span>      <span class="c1"># Clock fonts
</span><span class="n">FONT_SIZE_SMALL</span> <span class="o">=</span> <span class="mi">40</span>      <span class="c1"># Gravity / Relative Rate text
</span>
<span class="c1">#  Pygame setup 
</span><span class="n">pygame</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>
<span class="n">WIDTH</span><span class="p">,</span> <span class="n">HEIGHT</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">280</span>
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_mode</span><span class="p">((</span><span class="n">WIDTH</span><span class="p">,</span> <span class="n">HEIGHT</span><span class="p">))</span>
<span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s">"Gravitational Time Dilation Clock"</span><span class="p">)</span>
<span class="n">font_info</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">font</span><span class="p">.</span><span class="n">SysFont</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">FONT_SIZE_INFO</span><span class="p">)</span>
<span class="n">font_clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">font</span><span class="p">.</span><span class="n">SysFont</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">FONT_SIZE_CLOCK</span><span class="p">)</span>
<span class="n">font_small</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">font</span><span class="p">.</span><span class="n">SysFont</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">FONT_SIZE_SMALL</span><span class="p">)</span>
<span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">time</span><span class="p">.</span><span class="n">Clock</span><span class="p">()</span>

<span class="c1">#  Initial conditions 
</span><span class="n">gravity</span> <span class="o">=</span> <span class="n">g_surface</span>
<span class="n">keys</span> <span class="o">=</span> <span class="p">{</span><span class="s">"up"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="s">"down"</span><span class="p">:</span> <span class="bp">False</span><span class="p">}</span>
<span class="n">t_earth</span> <span class="o">=</span> <span class="mf">0.0</span>
<span class="n">t_gravity</span> <span class="o">=</span> <span class="mf">0.0</span>
<span class="n">prev_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>

<span class="c1">#  Matplotlib setup 
</span><span class="n">plt</span><span class="p">.</span><span class="n">ion</span><span class="p">()</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
<span class="n">fig</span><span class="p">.</span><span class="n">patch</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'black'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'black'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'x'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'lime'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'y'</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="s">'lime'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">xaxis</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'lime'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">yaxis</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'lime'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">title</span><span class="p">.</span><span class="n">set_color</span><span class="p">(</span><span class="s">'lime'</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">subplots_adjust</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="mf">0.25</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="mf">0.95</span><span class="p">,</span> <span class="n">top</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span> <span class="n">bottom</span><span class="o">=</span><span class="mf">0.12</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">canvas</span><span class="p">.</span><span class="n">manager</span><span class="p">.</span><span class="n">set_window_title</span><span class="p">(</span><span class="s">"Gravitational Time Dilation vs. Local Gravity"</span><span class="p">)</span>

<span class="n">line</span><span class="p">,</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">([],</span> <span class="p">[],</span> <span class="n">color</span><span class="o">=</span><span class="s">'blue'</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="s">'o'</span><span class="p">,</span> <span class="n">markerfacecolor</span><span class="o">=</span><span class="s">'skyblue'</span><span class="p">,</span> <span class="n">markersize</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="s">'-'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">"Gravity (m/s¬≤, log scale)"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">"Relative Rate (Earth Clock / Gravity Clock)"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xscale</span><span class="p">(</span><span class="s">'log'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'gray'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="s">'--'</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>

<span class="n">gravities</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">relative_rates</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1">#  Function to calculate gravity factor safely 
</span><span class="k">def</span> <span class="nf">gravity_factor_from_g</span><span class="p">(</span><span class="n">g</span><span class="p">):</span>
    <span class="n">r</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="n">G</span><span class="o">*</span><span class="n">M</span><span class="o">/</span><span class="n">g</span><span class="p">),</span> <span class="n">r_s</span> <span class="o">*</span> <span class="mf">1.0001</span><span class="p">)</span>
    <span class="k">return</span> <span class="mi">1</span> <span class="o">/</span> <span class="n">math</span><span class="p">.</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">G</span><span class="o">*</span><span class="n">M</span><span class="o">/</span><span class="p">(</span><span class="n">r</span><span class="o">*</span><span class="n">c</span><span class="o">**</span><span class="mi">2</span><span class="p">))</span>

<span class="c1">#  Format time function 
</span><span class="k">def</span> <span class="nf">format_time</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
    <span class="n">t_int</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
    <span class="n">h</span> <span class="o">=</span> <span class="n">t_int</span> <span class="o">//</span> <span class="mi">3600</span>
    <span class="n">m</span> <span class="o">=</span> <span class="p">(</span><span class="n">t_int</span> <span class="o">%</span> <span class="mi">3600</span><span class="p">)</span> <span class="o">//</span> <span class="mi">60</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">t_int</span> <span class="o">%</span> <span class="mi">60</span>
    <span class="k">return</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">h</span><span class="si">:</span><span class="mi">02</span><span class="n">d</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">m</span><span class="si">:</span><span class="mi">02</span><span class="n">d</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">s</span><span class="si">:</span><span class="mi">02</span><span class="n">d</span><span class="si">}</span><span class="s">"</span>

<span class="c1">#  Main loop 
</span><span class="n">running</span> <span class="o">=</span> <span class="bp">True</span>
<span class="k">while</span> <span class="n">running</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="p">.</span><span class="n">event</span><span class="p">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="n">running</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">elif</span> <span class="n">event</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">KEYDOWN</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">K_UP</span><span class="p">:</span>
                <span class="n">keys</span><span class="p">[</span><span class="s">"up"</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">elif</span> <span class="n">event</span><span class="p">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">K_DOWN</span><span class="p">:</span>
                <span class="n">keys</span><span class="p">[</span><span class="s">"down"</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">elif</span> <span class="n">event</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">KEYUP</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">K_UP</span><span class="p">:</span>
                <span class="n">keys</span><span class="p">[</span><span class="s">"up"</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="k">elif</span> <span class="n">event</span><span class="p">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">K_DOWN</span><span class="p">:</span>
                <span class="n">keys</span><span class="p">[</span><span class="s">"down"</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="c1">#  Compute delta time 
</span>    <span class="n">current_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
    <span class="n">delta_earth</span> <span class="o">=</span> <span class="n">current_time</span> <span class="o">-</span> <span class="n">prev_time</span>
    <span class="n">prev_time</span> <span class="o">=</span> <span class="n">current_time</span>

    <span class="c1">#  Update gravity 
</span>    <span class="k">if</span> <span class="n">keys</span><span class="p">[</span><span class="s">"up"</span><span class="p">]:</span>
        <span class="n">gravity</span> <span class="o">*=</span> <span class="mi">10</span><span class="o">**</span><span class="mf">0.05</span>
    <span class="k">if</span> <span class="n">keys</span><span class="p">[</span><span class="s">"down"</span><span class="p">]:</span>
        <span class="n">gravity</span> <span class="o">/=</span> <span class="mi">10</span><span class="o">**</span><span class="mf">0.05</span>
    <span class="n">gravity</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">gravity</span><span class="p">,</span> <span class="mf">1e-5</span><span class="p">)</span>

    <span class="c1">#  Update clocks 
</span>    <span class="n">t_earth</span> <span class="o">+=</span> <span class="n">delta_earth</span> <span class="o">/</span> <span class="n">gf_earth</span>
    <span class="n">gf</span> <span class="o">=</span> <span class="n">gravity_factor_from_g</span><span class="p">(</span><span class="n">gravity</span><span class="p">)</span>
    <span class="n">t_gravity</span> <span class="o">+=</span> <span class="n">delta_earth</span> <span class="o">/</span> <span class="n">gf</span>
    <span class="n">relative_rate</span> <span class="o">=</span> <span class="n">gf_earth</span> <span class="o">/</span> <span class="n">gf</span>

    <span class="c1">#  Update Matplotlib plot 
</span>    <span class="k">if</span> <span class="n">keys</span><span class="p">[</span><span class="s">"up"</span><span class="p">]</span> <span class="ow">or</span> <span class="n">keys</span><span class="p">[</span><span class="s">"down"</span><span class="p">]:</span>
        <span class="n">gravities</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">gravity</span><span class="p">)</span>
        <span class="n">relative_rates</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">relative_rate</span><span class="p">)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">gravities</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">30</span><span class="p">:</span>
            <span class="n">gravities</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="n">relative_rates</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">line</span><span class="p">.</span><span class="n">set_data</span><span class="p">(</span><span class="n">gravities</span><span class="p">,</span> <span class="n">relative_rates</span><span class="p">)</span>

        <span class="c1"># Remove old gradient fills
</span>        <span class="k">for</span> <span class="n">coll</span> <span class="ow">in</span> <span class="n">ax</span><span class="p">.</span><span class="n">collections</span><span class="p">:</span>
            <span class="n">coll</span><span class="p">.</span><span class="n">remove</span><span class="p">()</span>

        <span class="c1"># Gradient shadow under the curve
</span>        <span class="n">alpha_max</span> <span class="o">=</span> <span class="mf">0.5</span>
        <span class="n">n_layers</span> <span class="o">=</span> <span class="mi">10</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_layers</span><span class="p">):</span>
            <span class="n">alpha</span> <span class="o">=</span> <span class="n">alpha_max</span> <span class="o">*</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="n">n_layers</span>
            <span class="n">ax</span><span class="p">.</span><span class="n">fill_between</span><span class="p">(</span>
                <span class="n">gravities</span><span class="p">,</span>
                <span class="p">[</span><span class="n">r</span><span class="o">*</span><span class="p">(</span><span class="n">i</span><span class="o">/</span><span class="n">n_layers</span><span class="p">)</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">relative_rates</span><span class="p">],</span>
                <span class="n">relative_rates</span><span class="p">,</span>
                <span class="n">color</span><span class="o">=</span><span class="s">'skyblue'</span><span class="p">,</span>
                <span class="n">alpha</span><span class="o">=</span><span class="n">alpha</span>
            <span class="p">)</span>

        <span class="c1"># Dynamic Y-axis limits
</span>        <span class="n">ymin</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">relative_rates</span><span class="p">)</span> <span class="o">-</span> <span class="mf">0.1</span>
        <span class="n">ymax</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">relative_rates</span><span class="p">)</span> <span class="o">+</span> <span class="mf">0.1</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">set_ylim</span><span class="p">(</span><span class="n">ymin</span><span class="p">,</span> <span class="n">ymax</span><span class="p">)</span>

        <span class="n">ax</span><span class="p">.</span><span class="n">relim</span><span class="p">()</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">autoscale_view</span><span class="p">(</span><span class="n">scalex</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">scaley</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
        <span class="n">plt</span><span class="p">.</span><span class="n">pause</span><span class="p">(</span><span class="mf">0.001</span><span class="p">)</span>

    <span class="c1">#  Compute 1 Year equivalence 
</span>    <span class="n">gravity_years</span> <span class="o">=</span> <span class="n">relative_rate</span>  <span class="c1"># 1 Earth year = relative_rate Gravity Clock years
</span>    <span class="n">info_str</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"1 Year @ Earth = </span><span class="si">{</span><span class="n">gravity_years</span><span class="si">:</span><span class="p">.</span><span class="mi">6</span><span class="n">f</span><span class="si">}</span><span class="s"> Year @ Gravity Clock"</span>

    <span class="c1">#  Draw Pygame display 
</span>    <span class="n">screen</span><span class="p">.</span><span class="n">fill</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
    <span class="n">screen</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">font_info</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="n">info_str</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">0</span><span class="p">)),</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
    <span class="n">screen</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">font_clock</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="sa">f</span><span class="s">"Earth Clock: </span><span class="si">{</span><span class="n">format_time</span><span class="p">(</span><span class="n">t_earth</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">)),</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">60</span><span class="p">))</span>
    <span class="n">screen</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">font_clock</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="sa">f</span><span class="s">"Gravity Clock: </span><span class="si">{</span><span class="n">format_time</span><span class="p">(</span><span class="n">t_gravity</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">)),</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">120</span><span class="p">))</span>
    <span class="n">screen</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">font_small</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="sa">f</span><span class="s">"Gravity: </span><span class="si">{</span><span class="n">gravity</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">e</span><span class="si">}</span><span class="s"> m/s¬≤"</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)),</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">180</span><span class="p">))</span>
    <span class="n">screen</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">font_small</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="sa">f</span><span class="s">"Relative Rate: </span><span class="si">{</span><span class="n">relative_rate</span><span class="si">:</span><span class="p">.</span><span class="mi">6</span><span class="n">f</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">)),</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">230</span><span class="p">))</span>

    <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">flip</span><span class="p">()</span>
    <span class="n">clock</span><span class="p">.</span><span class="n">tick</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>

<span class="n">pygame</span><span class="p">.</span><span class="n">quit</span><span class="p">()</span>
<span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>

</code></pre></div></div>

<h2 id="how-to-run">How to Run</h2>

<ol>
  <li>Install required libraries:</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install pygame matplotlib
</code></pre></div></div>

<ol>
  <li>Run the Python script:</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python gravitational_time_dilation.py
</code></pre></div></div>

<ol>
  <li>Clikc on the PyGame window and then Use <strong>UP/DOWN arrow keys</strong> to change gravity interactively.</li>
</ol>

<h2 id="key-learnings">Key Learnings</h2>

<ul>
  <li>Gravitational time dilation in practice</li>
  <li>Interactive simulations with Pygame</li>
  <li>Real-time plotting with Matplotlib</li>
  <li>Combining physics with visualization for education</li>
</ul>

<h2 id="further-ideas">Further Ideas</h2>

<ul>
  <li>Add multiple objects with different masses</li>
  <li>Show a 3D representation of gravity wells</li>
  <li>Include relativistic effects at high velocities</li>
  <li>Export simulation data for further analysis</li>
</ul>]]></content><author><name>PyShine Team</name></author><category term="gravitational-time-dilation" /><category term="relativity" /><category term="python-simulation" /><category term="interactive" /><summary type="html"><![CDATA[Interactive simulation showing Earth Clock vs Gravity Clock and how gravity affects time.]]></summary></entry><entry><title type="html">AC to DC conversion Simulation in Python</title><link href="https://www.pyshine.com/AC-to-DC-Full-Wave-Rectifier-in-Pygame/" rel="alternate" type="text/html" title="AC to DC conversion Simulation in Python" /><published>2025-10-29T00:00:00+00:00</published><updated>2025-10-29T00:00:00+00:00</updated><id>https://www.pyshine.com/AC-to-DC-Full-Wave-Rectifier-in-Pygame</id><content type="html" xml:base="https://www.pyshine.com/AC-to-DC-Full-Wave-Rectifier-in-Pygame/"><![CDATA[<h1 id="full-wave-bridge-rectifier-simulation-with-pygame">Full Wave Bridge Rectifier Simulation with Pygame</h1>

<h3 id="educational-python-project--visualize-ac-to-dc-conversion">Educational Python Project ‚Äì Visualize AC to DC Conversion</h3>

<p>This tutorial walks through building a <strong>Full Wave Bridge Rectifier Simulation</strong> using <strong>Python and Pygame</strong>. The simulation visually demonstrates how <strong>AC (Alternating Current)</strong> is converted into <strong>DC (Direct Current)</strong> using <strong>four diodes</strong> arranged in a bridge circuit.</p>

<h2 id="table-of-contents">Table of Contents</h2>
<ul>
  <li><a href="#overview">Overview</a></li>
  <li><a href="#circuit-concept">Circuit Concept</a></li>
  <li><a href="#pygame-setup">Pygame Setup</a></li>
  <li><a href="#drawing-the-circuit">Drawing the Circuit</a></li>
  <li><a href="#waveform-animation">Waveform Animation</a></li>
  <li><a href="#current-flow-visualization">Current Flow Visualization</a></li>
  <li><a href="#complete-python-code">Complete Python Code</a></li>
  <li><a href="#how-to-run">How to Run</a></li>
  <li><a href="#key-learnings">Key Learnings</a></li>
  <li><a href="#further-ideas">Further Ideas</a></li>
</ul>

<h2 id="overview">Overview</h2>

<p>This simulation provides an interactive, animated look at how a <strong>bridge rectifier</strong> converts alternating current into pulsating direct current. The display shows:</p>

<ul>
  <li><strong>Top:</strong> Input AC waveform</li>
  <li><strong>Center:</strong> Bridge circuit with diode conduction paths</li>
  <li><strong>Bottom:</strong> Output DC waveform</li>
</ul>

<p>The current flow alternates between two paths during positive and negative half-cycles, visually explaining the rectification process.</p>

<h2 id="circuit-concept">Circuit Concept</h2>

<p>A <strong>full wave bridge rectifier</strong> uses <strong>four diodes (D1‚ÄìD4)</strong> arranged in a diamond shape. During each half-cycle:</p>

<ul>
  <li><strong>Positive Half-Cycle:</strong>
    <ul>
      <li>Current flows through D1 ‚Üí Load ‚Üí D4.</li>
      <li>D1 and D4 conduct.</li>
    </ul>
  </li>
  <li><strong>Negative Half-Cycle:</strong>
    <ul>
      <li>Current flows through D3 ‚Üí Load ‚Üí D2.</li>
      <li>D2 and D3 conduct.</li>
    </ul>
  </li>
</ul>

<p>Thus, both halves of the AC waveform are converted into unidirectional current, producing a full-wave DC output.</p>

<h2 id="pygame-setup">Pygame Setup</h2>

<p>We start by setting up a <strong>650√ó900 portrait window</strong> to allow space for the waveforms and the circuit diagram.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pygame</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">math</span>
<span class="n">pygame</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>

<span class="n">W</span><span class="p">,</span> <span class="n">H</span> <span class="o">=</span> <span class="mi">650</span><span class="p">,</span> <span class="mi">900</span>
<span class="n">S</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_mode</span><span class="p">((</span><span class="n">W</span><span class="p">,</span> <span class="n">H</span><span class="p">))</span>
<span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s">"Full Wave Bridge Rectifier"</span><span class="p">)</span>
<span class="n">F</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">font</span><span class="p">.</span><span class="n">SysFont</span><span class="p">(</span><span class="s">"Arial"</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="n">bold</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">clk</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">time</span><span class="p">.</span><span class="n">Clock</span><span class="p">()</span>
</code></pre></div></div>

<p>We define a dictionary of colors for background, grid, wires, diodes, and active paths:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"BG"</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
    <span class="s">"GRID"</span><span class="p">:</span> <span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">),</span>
    <span class="s">"WIRE"</span><span class="p">:</span> <span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">),</span>
    <span class="s">"DIODE"</span><span class="p">:</span> <span class="p">(</span><span class="mi">150</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="mi">150</span><span class="p">),</span>
    <span class="s">"IN"</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span>
    <span class="s">"OUT"</span><span class="p">:</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">220</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
    <span class="s">"ANODE"</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
    <span class="s">"CATHODE"</span><span class="p">:</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
    <span class="s">"POSITIVE_HALF"</span><span class="p">:</span> <span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span>
    <span class="s">"NEGATIVE_HALF"</span><span class="p">:</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="drawing-the-circuit">Drawing the Circuit</h2>

<p>We build a diamond-shaped layout for the diodes:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>       (D1)
        / \
     D2   D3
        \ /
       (D4)
</code></pre></div></div>

<p>Each diode is drawn with proper anode/cathode markers using <code class="language-plaintext highlighter-rouge">pygame.draw.polygon()</code> and <code class="language-plaintext highlighter-rouge">pygame.draw.circle()</code> for clarity.</p>

<p>Active diodes (the ones conducting in the current half-cycle) are highlighted in bright colors.</p>

<h2 id="waveform-animation">Waveform Animation</h2>

<p>Two waveforms are drawn to represent <strong>input AC</strong> and <strong>output DC</strong> signals:</p>

<ul>
  <li>The <strong>input AC</strong> is plotted as a sine wave (<code class="language-plaintext highlighter-rouge">math.sin()</code>), color-coded for positive (blue) and negative (red) halves.</li>
  <li>The <strong>output DC</strong> is plotted as the <strong>absolute value</strong> of the sine wave, representing rectified output.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">280</span><span class="p">):</span>
    <span class="n">y_val</span> <span class="o">=</span> <span class="n">amp</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">freq</span><span class="o">*</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">p</span><span class="p">))</span>
    <span class="n">y_pos</span> <span class="o">=</span> <span class="n">box_y</span> <span class="o">+</span> <span class="n">y_val</span>
    <span class="n">color</span> <span class="o">=</span> <span class="n">C</span><span class="p">[</span><span class="s">"POSITIVE_HALF"</span><span class="p">]</span> <span class="k">if</span> <span class="n">y_val</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">C</span><span class="p">[</span><span class="s">"NEGATIVE_HALF"</span><span class="p">]</span>
    <span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="p">(</span><span class="n">cx</span> <span class="o">-</span> <span class="mi">140</span> <span class="o">+</span> <span class="n">x</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">y_pos</span><span class="p">)),</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="current-flow-visualization">Current Flow Visualization</h2>

<p>To make the current path more interactive, small <strong>moving dots</strong> simulate the direction of electron flow through the active diodes and load resistor. The animation updates continuously using a changing <code class="language-plaintext highlighter-rouge">phase</code> variable.</p>

<p>Positive and negative half-cycles each show distinct paths:</p>

<ul>
  <li><strong>Blue dots:</strong> Positive half (D1‚ÄìD4 conducting)</li>
  <li><strong>Red dots:</strong> Negative half (D2‚ÄìD3 conducting)</li>
</ul>

<p>This helps students visually understand how current always flows in the same direction through the load.</p>

<h2 id="complete-python-code">Complete Python Code</h2>

<p>Below is the complete code that combines everything explained above.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">pygame</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">math</span>
<span class="n">pygame</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>

<span class="c1"># Setup 
</span><span class="n">W</span><span class="p">,</span> <span class="n">H</span> <span class="o">=</span> <span class="mi">650</span><span class="p">,</span> <span class="mi">900</span>  <span class="c1"># Portrait orientation
</span><span class="n">S</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_mode</span><span class="p">((</span><span class="n">W</span><span class="p">,</span> <span class="n">H</span><span class="p">))</span>
<span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s">"Full Wave Bridge Rectifier"</span><span class="p">)</span>
<span class="n">F</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">font</span><span class="p">.</span><span class="n">SysFont</span><span class="p">(</span><span class="s">"Arial"</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="n">bold</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">clk</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">time</span><span class="p">.</span><span class="n">Clock</span><span class="p">()</span>

<span class="c1"># Colors
</span><span class="n">C</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"BG"</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
    <span class="s">"GRID"</span><span class="p">:</span> <span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">),</span>
    <span class="s">"WIRE"</span><span class="p">:</span> <span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">),</span>  <span class="c1"># Dimmer for non-active wires
</span>    <span class="s">"DIODE"</span><span class="p">:</span> <span class="p">(</span><span class="mi">150</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="mi">150</span><span class="p">),</span> <span class="c1"># Dimmer for non-active diodes
</span>    <span class="s">"IN"</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span>
    <span class="s">"OUT"</span><span class="p">:</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">220</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
    <span class="s">"LOAD"</span><span class="p">:</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="mi">150</span><span class="p">),</span>
    <span class="s">"ANODE"</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>    <span class="c1"># Green for anode
</span>    <span class="s">"CATHODE"</span><span class="p">:</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>  <span class="c1"># Red for cathode
</span>    <span class="s">"POSITIVE_HALF"</span><span class="p">:</span> <span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span>  <span class="c1"># BLUE for positive half (swapped)
</span>    <span class="s">"NEGATIVE_HALF"</span><span class="p">:</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>   <span class="c1"># RED for negative half (swapped)
</span><span class="p">}</span>

<span class="c1"># Wave and Animation
</span><span class="n">amp</span><span class="p">,</span> <span class="n">freq</span><span class="p">,</span> <span class="n">speed</span><span class="p">,</span> <span class="n">phase</span> <span class="o">=</span> <span class="mi">50</span><span class="p">,</span> <span class="mf">0.15</span><span class="p">,</span> <span class="p">.</span><span class="mi">04</span><span class="p">,</span> <span class="mi">0</span>
<span class="n">draw</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span>
<span class="n">txt</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">t</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">c</span><span class="p">:</span> <span class="n">S</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">F</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">c</span><span class="p">),</span>
             <span class="n">F</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">c</span><span class="p">).</span><span class="n">get_rect</span><span class="p">(</span><span class="n">center</span><span class="o">=</span><span class="n">p</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">grid</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">W</span><span class="p">,</span> <span class="mi">50</span><span class="p">):</span>
        <span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">C</span><span class="p">[</span><span class="s">"GRID"</span><span class="p">],</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">H</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">H</span><span class="p">,</span> <span class="mi">50</span><span class="p">):</span>
        <span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">C</span><span class="p">[</span><span class="s">"GRID"</span><span class="p">],</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="p">(</span><span class="n">W</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">draw_diode_with_polarity</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">angle</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">active</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">pos</span>
    <span class="n">s</span> <span class="o">=</span> <span class="mi">20</span>
    
    <span class="c1"># Create a surface for the diode
</span>    <span class="n">diode_surface</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">Surface</span><span class="p">((</span><span class="n">s</span><span class="o">*</span><span class="mi">3</span><span class="p">,</span> <span class="n">s</span><span class="o">*</span><span class="mi">3</span><span class="p">),</span> <span class="n">pygame</span><span class="p">.</span><span class="n">SRCALPHA</span><span class="p">)</span>
    
    <span class="c1"># Use provided color or default
</span>    <span class="k">if</span> <span class="n">active</span> <span class="ow">and</span> <span class="n">color</span><span class="p">:</span>
        <span class="n">diode_color</span> <span class="o">=</span> <span class="n">color</span>
        <span class="n">wire_color</span> <span class="o">=</span> <span class="n">color</span>
        <span class="c1"># Make active diodes brighter
</span>        <span class="n">anode_color</span> <span class="o">=</span> <span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>  <span class="c1"># Brighter green
</span>        <span class="n">cathode_color</span> <span class="o">=</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span> <span class="c1"># Brighter red
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="n">diode_color</span> <span class="o">=</span> <span class="n">C</span><span class="p">[</span><span class="s">"DIODE"</span><span class="p">]</span>
        <span class="n">wire_color</span> <span class="o">=</span> <span class="n">C</span><span class="p">[</span><span class="s">"WIRE"</span><span class="p">]</span>
        <span class="n">anode_color</span> <span class="o">=</span> <span class="n">C</span><span class="p">[</span><span class="s">"ANODE"</span><span class="p">]</span>
        <span class="n">cathode_color</span> <span class="o">=</span> <span class="n">C</span><span class="p">[</span><span class="s">"CATHODE"</span><span class="p">]</span>
    
    <span class="c1"># Draw diode symbol - reverse the direction if needed
</span>    <span class="k">if</span> <span class="n">reverse</span><span class="p">:</span>
        <span class="c1"># Reverse diode (cathode on left, anode on right)
</span>        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">polygon</span><span class="p">(</span><span class="n">diode_surface</span><span class="p">,</span> <span class="n">diode_color</span><span class="p">,</span> 
                           <span class="p">[(</span><span class="n">s</span><span class="o">*</span><span class="mf">2.2</span><span class="p">,</span> <span class="n">s</span><span class="o">*</span><span class="mf">0.5</span><span class="p">),</span> <span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">2.2</span><span class="p">,</span> <span class="n">s</span><span class="o">*</span><span class="mf">2.5</span><span class="p">),</span> <span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">1.2</span><span class="p">,</span> <span class="n">s</span><span class="o">*</span><span class="mf">1.5</span><span class="p">)])</span>
        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">polygon</span><span class="p">(</span><span class="n">diode_surface</span><span class="p">,</span> <span class="n">wire_color</span><span class="p">,</span> 
                           <span class="p">[(</span><span class="n">s</span><span class="o">*</span><span class="mf">2.2</span><span class="p">,</span> <span class="n">s</span><span class="o">*</span><span class="mf">0.5</span><span class="p">),</span> <span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">2.2</span><span class="p">,</span> <span class="n">s</span><span class="o">*</span><span class="mf">2.5</span><span class="p">),</span> <span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">1.2</span><span class="p">,</span> <span class="n">s</span><span class="o">*</span><span class="mf">1.5</span><span class="p">)],</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">diode_surface</span><span class="p">,</span> <span class="n">wire_color</span><span class="p">,</span> <span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">0.8</span><span class="p">,</span> <span class="n">s</span><span class="o">*</span><span class="mf">0.5</span><span class="p">),</span> <span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">0.8</span><span class="p">,</span> <span class="n">s</span><span class="o">*</span><span class="mf">2.5</span><span class="p">),</span> <span class="mi">3</span><span class="p">)</span>
        
        <span class="c1"># Anode and cathode markers (swapped for reverse diode)
</span>        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">diode_surface</span><span class="p">,</span> <span class="n">cathode_color</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">0.5</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">1.5</span><span class="p">)),</span> <span class="mi">4</span><span class="p">)</span>  <span class="c1"># Cathode on left
</span>        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">diode_surface</span><span class="p">,</span> <span class="n">anode_color</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">2.5</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">1.5</span><span class="p">)),</span> <span class="mi">4</span><span class="p">)</span>    <span class="c1"># Anode on right
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Normal diode (anode on left, cathode on right)
</span>        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">polygon</span><span class="p">(</span><span class="n">diode_surface</span><span class="p">,</span> <span class="n">diode_color</span><span class="p">,</span> 
                           <span class="p">[(</span><span class="n">s</span><span class="o">*</span><span class="mf">0.8</span><span class="p">,</span> <span class="n">s</span><span class="o">*</span><span class="mf">0.5</span><span class="p">),</span> <span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">0.8</span><span class="p">,</span> <span class="n">s</span><span class="o">*</span><span class="mf">2.5</span><span class="p">),</span> <span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">1.8</span><span class="p">,</span> <span class="n">s</span><span class="o">*</span><span class="mf">1.5</span><span class="p">)])</span>
        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">polygon</span><span class="p">(</span><span class="n">diode_surface</span><span class="p">,</span> <span class="n">wire_color</span><span class="p">,</span> 
                           <span class="p">[(</span><span class="n">s</span><span class="o">*</span><span class="mf">0.8</span><span class="p">,</span> <span class="n">s</span><span class="o">*</span><span class="mf">0.5</span><span class="p">),</span> <span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">0.8</span><span class="p">,</span> <span class="n">s</span><span class="o">*</span><span class="mf">2.5</span><span class="p">),</span> <span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">1.8</span><span class="p">,</span> <span class="n">s</span><span class="o">*</span><span class="mf">1.5</span><span class="p">)],</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">diode_surface</span><span class="p">,</span> <span class="n">wire_color</span><span class="p">,</span> <span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">2.2</span><span class="p">,</span> <span class="n">s</span><span class="o">*</span><span class="mf">0.5</span><span class="p">),</span> <span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">2.2</span><span class="p">,</span> <span class="n">s</span><span class="o">*</span><span class="mf">2.5</span><span class="p">),</span> <span class="mi">3</span><span class="p">)</span>
        
        <span class="c1"># Anode and cathode markers
</span>        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">diode_surface</span><span class="p">,</span> <span class="n">anode_color</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">0.5</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">1.5</span><span class="p">)),</span> <span class="mi">4</span><span class="p">)</span>
        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">diode_surface</span><span class="p">,</span> <span class="n">cathode_color</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">2.5</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="o">*</span><span class="mf">1.5</span><span class="p">)),</span> <span class="mi">4</span><span class="p">)</span>
    
    <span class="c1"># Rotate the surface
</span>    <span class="n">rotated_surface</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">diode_surface</span><span class="p">,</span> <span class="n">angle</span><span class="p">)</span>
    
    <span class="c1"># Get the rect and center it at the position
</span>    <span class="n">rect</span> <span class="o">=</span> <span class="n">rotated_surface</span><span class="p">.</span><span class="n">get_rect</span><span class="p">(</span><span class="n">center</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
    <span class="n">S</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">rotated_surface</span><span class="p">,</span> <span class="n">rect</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">waves</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="n">grid</span><span class="p">()</span>
    <span class="n">cx</span><span class="p">,</span> <span class="n">cy</span> <span class="o">=</span> <span class="n">W</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">H</span><span class="o">//</span><span class="mi">2</span>
    
    <span class="c1"># Input Wave (AC) - TOP (moved 40px down) 
</span>    <span class="n">box_y</span> <span class="o">=</span> <span class="mi">160</span>  <span class="c1"># Was 120, now 160 (40px down)
</span>    <span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">C</span><span class="p">[</span><span class="s">"DIODE"</span><span class="p">],</span> <span class="p">(</span><span class="n">cx</span> <span class="o">-</span> <span class="mi">150</span><span class="p">,</span> <span class="n">box_y</span> <span class="o">-</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">115</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>
    
    <span class="c1"># Draw input wave with color coding
</span>    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">280</span><span class="p">):</span>
        <span class="n">y_val</span> <span class="o">=</span> <span class="n">amp</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">freq</span><span class="o">*</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">p</span><span class="p">))</span>
        <span class="n">y_pos</span> <span class="o">=</span> <span class="n">box_y</span> <span class="o">+</span> <span class="n">y_val</span>
        <span class="n">color</span> <span class="o">=</span> <span class="n">C</span><span class="p">[</span><span class="s">"POSITIVE_HALF"</span><span class="p">]</span> <span class="k">if</span> <span class="n">y_val</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">C</span><span class="p">[</span><span class="s">"NEGATIVE_HALF"</span><span class="p">]</span>
        <span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="p">(</span><span class="n">cx</span> <span class="o">-</span> <span class="mi">140</span> <span class="o">+</span> <span class="n">x</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">y_pos</span><span class="p">)),</span> <span class="mi">1</span><span class="p">)</span>
    
    <span class="n">txt</span><span class="p">(</span><span class="s">"AC Input Waveform"</span><span class="p">,</span> <span class="p">(</span><span class="n">cx</span><span class="p">,</span> <span class="n">box_y</span> <span class="o">-</span> <span class="mi">90</span><span class="p">),</span> <span class="n">C</span><span class="p">[</span><span class="s">"IN"</span><span class="p">])</span>
    <span class="c1"># txt("Live", (cx - 50, box_y + 80), C["IN"])
</span>    <span class="c1"># txt("Neutral", (cx + 50, box_y + 80), C["IN"])
</span>
    <span class="c1"># Output Wave (Full-Wave DC) - BOTTOM (moved 40px up) 
</span>    <span class="n">box_y</span> <span class="o">=</span> <span class="n">H</span> <span class="o">-</span> <span class="mi">160</span>  <span class="c1"># Was H - 120, now H - 160 (40px up)
</span>    <span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">C</span><span class="p">[</span><span class="s">"DIODE"</span><span class="p">],</span> <span class="p">(</span><span class="n">cx</span> <span class="o">-</span> <span class="mi">150</span><span class="p">,</span> <span class="n">box_y</span> <span class="o">-</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">115</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>
    
    <span class="c1"># Draw output wave with color coding based on original input phase
</span>    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">280</span><span class="p">):</span>
        <span class="n">y_val</span> <span class="o">=</span> <span class="n">amp</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">freq</span><span class="o">*</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">p</span><span class="p">))</span>
        <span class="n">y_pos</span> <span class="o">=</span> <span class="n">box_y</span> <span class="o">-</span> <span class="n">amp</span> <span class="o">*</span> <span class="nb">abs</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">freq</span><span class="o">*</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">p</span><span class="p">)))</span>
        <span class="n">color</span> <span class="o">=</span> <span class="n">C</span><span class="p">[</span><span class="s">"POSITIVE_HALF"</span><span class="p">]</span> <span class="k">if</span> <span class="n">y_val</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">C</span><span class="p">[</span><span class="s">"NEGATIVE_HALF"</span><span class="p">]</span>
        <span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="p">(</span><span class="n">cx</span> <span class="o">-</span> <span class="mi">140</span> <span class="o">+</span> <span class="n">x</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">y_pos</span><span class="p">)),</span> <span class="mi">1</span><span class="p">)</span>
    
    <span class="n">txt</span><span class="p">(</span><span class="s">"DC Output Waveform"</span><span class="p">,</span> <span class="p">(</span><span class="n">cx</span><span class="p">,</span> <span class="n">box_y</span> <span class="o">-</span> <span class="mi">90</span><span class="p">),</span> <span class="n">C</span><span class="p">[</span><span class="s">"OUT"</span><span class="p">])</span>
    <span class="n">txt</span><span class="p">(</span><span class="s">"-"</span><span class="p">,</span> <span class="p">(</span><span class="n">cx</span> <span class="o">-</span> <span class="mi">50</span><span class="p">,</span> <span class="n">box_y</span> <span class="o">+</span> <span class="mi">80</span><span class="p">),</span> <span class="n">C</span><span class="p">[</span><span class="s">"OUT"</span><span class="p">])</span>
    <span class="n">txt</span><span class="p">(</span><span class="s">"+"</span><span class="p">,</span> <span class="p">(</span><span class="n">cx</span> <span class="o">+</span> <span class="mi">50</span><span class="p">,</span> <span class="n">box_y</span> <span class="o">+</span> <span class="mi">80</span><span class="p">),</span> <span class="n">C</span><span class="p">[</span><span class="s">"OUT"</span><span class="p">])</span>

    <span class="c1"># Bridge Rectifier Circuit - CENTER 
</span>    <span class="n">center_x</span><span class="p">,</span> <span class="n">center_y</span> <span class="o">=</span> <span class="n">cx</span><span class="p">,</span> <span class="n">H</span><span class="o">//</span><span class="mi">2</span>
    <span class="n">radius</span> <span class="o">=</span> <span class="mi">120</span>
    
    <span class="c1"># Define the four points of the diamond
</span>    <span class="n">top</span> <span class="o">=</span> <span class="p">(</span><span class="n">center_x</span><span class="p">,</span> <span class="n">center_y</span> <span class="o">-</span> <span class="n">radius</span><span class="p">)</span>      <span class="c1"># Live input
</span>    <span class="n">right</span> <span class="o">=</span> <span class="p">(</span><span class="n">center_x</span> <span class="o">+</span> <span class="n">radius</span><span class="p">,</span> <span class="n">center_y</span><span class="p">)</span>    <span class="c1"># Positive output
</span>    <span class="n">bottom</span> <span class="o">=</span> <span class="p">(</span><span class="n">center_x</span><span class="p">,</span> <span class="n">center_y</span> <span class="o">+</span> <span class="n">radius</span><span class="p">)</span>   <span class="c1"># Neutral input
</span>    <span class="n">left</span> <span class="o">=</span> <span class="p">(</span><span class="n">center_x</span> <span class="o">-</span> <span class="n">radius</span><span class="p">,</span> <span class="n">center_y</span><span class="p">)</span>     <span class="c1"># Negative output
</span>
    <span class="c1"># Determine current half cycle for coloring
</span>    <span class="n">current_sine</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">freq</span> <span class="o">*</span> <span class="p">(</span><span class="mi">140</span> <span class="o">+</span> <span class="n">p</span><span class="p">))</span>  <span class="c1"># Sample middle of waveform
</span>    <span class="n">is_positive_half</span> <span class="o">=</span> <span class="n">current_sine</span> <span class="o">&gt;=</span> <span class="mi">0</span>
    <span class="n">active_color</span> <span class="o">=</span> <span class="n">C</span><span class="p">[</span><span class="s">"POSITIVE_HALF"</span><span class="p">]</span> <span class="k">if</span> <span class="n">is_positive_half</span> <span class="k">else</span> <span class="n">C</span><span class="p">[</span><span class="s">"NEGATIVE_HALF"</span><span class="p">]</span>

    <span class="c1"># Draw all wires in dim color first
</span>    <span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">C</span><span class="p">[</span><span class="s">"WIRE"</span><span class="p">],</span> <span class="n">top</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>      <span class="c1"># Top to right
</span>    <span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">C</span><span class="p">[</span><span class="s">"WIRE"</span><span class="p">],</span> <span class="n">right</span><span class="p">,</span> <span class="n">bottom</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>   <span class="c1"># Right to bottom  
</span>    <span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">C</span><span class="p">[</span><span class="s">"WIRE"</span><span class="p">],</span> <span class="n">bottom</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>    <span class="c1"># Bottom to left
</span>    <span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">C</span><span class="p">[</span><span class="s">"WIRE"</span><span class="p">],</span> <span class="n">left</span><span class="p">,</span> <span class="n">top</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>       <span class="c1"># Left to top
</span>
    <span class="c1"># Highlight active current paths with Z-shape
</span>    <span class="k">if</span> <span class="n">is_positive_half</span><span class="p">:</span>
        <span class="c1"># Positive half cycle: Live ‚Üí D1 ‚Üí Positive ‚Üí Load ‚Üí Negative ‚Üí D4 ‚Üí Neutral
</span>        <span class="c1"># This forms a Z-shape: top-right to bottom-left
</span>        <span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">active_color</span><span class="p">,</span> <span class="n">top</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>      <span class="c1"># Live to Positive via D1
</span>        <span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">active_color</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">bottom</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>    <span class="c1"># Negative to Neutral via D4
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Negative half cycle: Neutral ‚Üí D3 ‚Üí Positive ‚Üí Load ‚Üí Negative ‚Üí D2 ‚Üí Live
</span>        <span class="c1"># This forms the opposite Z-shape: bottom-right to top-left
</span>        <span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">active_color</span><span class="p">,</span> <span class="n">bottom</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>   <span class="c1"># Neutral to Positive via D3
</span>        <span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">active_color</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">top</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>       <span class="c1"># Negative to Live via D2
</span>
    <span class="c1"># Diodes with UPDATED directions (D2 and D3 reversed):
</span>    <span class="c1"># D1: Top-right - Live to Positive (normal direction)
</span>    <span class="c1"># D2: Top-left - Negative to Live (REVERSE direction - NOW NORMAL)
</span>    <span class="c1"># D3: Bottom-right - Neutral to Positive (normal direction - NOW REVERSE)  
</span>    <span class="c1"># D4: Bottom-left - Negative to Neutral (REVERSE direction)
</span>    
    <span class="c1"># Only color the two conducting diodes
</span>    <span class="k">if</span> <span class="n">is_positive_half</span><span class="p">:</span>
        <span class="c1"># Positive half cycle: D1 and D4 conduct (ONLY these two are colored)
</span>        <span class="n">draw_diode_with_polarity</span><span class="p">(((</span><span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">right</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">top</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">right</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="n">angle</span><span class="o">=</span><span class="mi">135</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">active_color</span><span class="p">,</span> <span class="n">active</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># D1 (normal)
</span>        <span class="n">draw_diode_with_polarity</span><span class="p">(((</span><span class="n">left</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">left</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">top</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="n">angle</span><span class="o">=</span><span class="mi">225</span><span class="p">)</span>  <span class="c1"># D2 (inactive - FIXED: removed color)
</span>        <span class="n">draw_diode_with_polarity</span><span class="p">(((</span><span class="n">right</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">right</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="n">angle</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># D3 (now reverse - was normal)
</span>        <span class="n">draw_diode_with_polarity</span><span class="p">(((</span><span class="n">bottom</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">left</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">bottom</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">left</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="n">angle</span><span class="o">=</span><span class="mi">315</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">active_color</span><span class="p">,</span> <span class="n">active</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># D4 (reverse)
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Negative half cycle: D2 and D3 conduct (ONLY these two are colored)
</span>        <span class="n">draw_diode_with_polarity</span><span class="p">(((</span><span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">right</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">top</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">right</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="n">angle</span><span class="o">=</span><span class="mi">135</span><span class="p">)</span>  <span class="c1"># D1 (inactive)
</span>        <span class="n">draw_diode_with_polarity</span><span class="p">(((</span><span class="n">left</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">left</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">top</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="n">angle</span><span class="o">=</span><span class="mi">225</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">active_color</span><span class="p">,</span> <span class="n">active</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># D2 (now normal - was reverse)
</span>        <span class="n">draw_diode_with_polarity</span><span class="p">(((</span><span class="n">right</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">right</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="n">angle</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">active_color</span><span class="p">,</span> <span class="n">active</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># D3 (now reverse - was normal)
</span>        <span class="n">draw_diode_with_polarity</span><span class="p">(((</span><span class="n">bottom</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">left</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">bottom</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">left</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span> <span class="n">angle</span><span class="o">=</span><span class="mi">315</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># D4 (inactive)
</span>
    <span class="c1"># Label diodes
</span>    <span class="n">txt</span><span class="p">(</span><span class="s">"D1"</span><span class="p">,</span> <span class="p">(</span><span class="n">center_x</span> <span class="o">+</span> <span class="n">radius</span><span class="o">*</span><span class="mf">0.7</span><span class="p">,</span> <span class="n">center_y</span> <span class="o">-</span> <span class="n">radius</span><span class="o">*</span><span class="mf">0.3</span><span class="p">),</span> <span class="n">C</span><span class="p">[</span><span class="s">"WIRE"</span><span class="p">])</span>
    <span class="n">txt</span><span class="p">(</span><span class="s">"D2"</span><span class="p">,</span> <span class="p">(</span><span class="n">center_x</span> <span class="o">-</span> <span class="n">radius</span><span class="o">*</span><span class="mf">0.7</span><span class="p">,</span> <span class="n">center_y</span> <span class="o">-</span> <span class="n">radius</span><span class="o">*</span><span class="mf">0.3</span><span class="p">),</span> <span class="n">C</span><span class="p">[</span><span class="s">"WIRE"</span><span class="p">])</span>
    <span class="n">txt</span><span class="p">(</span><span class="s">"D3"</span><span class="p">,</span> <span class="p">(</span><span class="n">center_x</span> <span class="o">+</span> <span class="n">radius</span><span class="o">*</span><span class="mf">0.7</span><span class="p">,</span> <span class="n">center_y</span> <span class="o">+</span> <span class="n">radius</span><span class="o">*</span><span class="mf">0.3</span><span class="p">),</span> <span class="n">C</span><span class="p">[</span><span class="s">"WIRE"</span><span class="p">])</span>
    <span class="n">txt</span><span class="p">(</span><span class="s">"D4"</span><span class="p">,</span> <span class="p">(</span><span class="n">center_x</span> <span class="o">-</span> <span class="n">radius</span><span class="o">*</span><span class="mf">0.7</span><span class="p">,</span> <span class="n">center_y</span> <span class="o">+</span> <span class="n">radius</span><span class="o">*</span><span class="mf">0.3</span><span class="p">),</span> <span class="n">C</span><span class="p">[</span><span class="s">"WIRE"</span><span class="p">])</span>

    <span class="c1"># AC Input connections - SHORT 20px wires with labels
</span>    <span class="c1"># Live wire - short line upward from top point
</span>    <span class="n">wire_color_live</span> <span class="o">=</span> <span class="n">active_color</span> <span class="k">if</span> <span class="p">(</span><span class="n">is_positive_half</span><span class="p">)</span> <span class="k">else</span> <span class="n">C</span><span class="p">[</span><span class="s">"WIRE"</span><span class="p">]</span>
    <span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">wire_color_live</span><span class="p">,</span> <span class="n">top</span><span class="p">,</span> <span class="p">(</span><span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">top</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="mi">20</span><span class="p">),</span> <span class="mi">5</span> <span class="k">if</span> <span class="n">is_positive_half</span> <span class="k">else</span> <span class="mi">3</span><span class="p">)</span>
    <span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">C</span><span class="p">[</span><span class="s">"IN"</span><span class="p">],</span> <span class="p">(</span><span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">top</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="mi">25</span><span class="p">),</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">txt</span><span class="p">(</span><span class="s">"L"</span><span class="p">,</span> <span class="p">(</span><span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">top</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="mi">40</span><span class="p">),</span> <span class="n">C</span><span class="p">[</span><span class="s">"IN"</span><span class="p">])</span>
    
    <span class="c1"># Neutral wire - short line downward from bottom point
</span>    <span class="n">wire_color_neutral</span> <span class="o">=</span> <span class="n">active_color</span> <span class="k">if</span> <span class="p">(</span><span class="ow">not</span> <span class="n">is_positive_half</span><span class="p">)</span> <span class="k">else</span> <span class="n">C</span><span class="p">[</span><span class="s">"WIRE"</span><span class="p">]</span>
    <span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">wire_color_neutral</span><span class="p">,</span> <span class="n">bottom</span><span class="p">,</span> <span class="p">(</span><span class="n">bottom</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">20</span><span class="p">),</span> <span class="mi">5</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">is_positive_half</span> <span class="k">else</span> <span class="mi">3</span><span class="p">)</span>
    <span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">C</span><span class="p">[</span><span class="s">"IN"</span><span class="p">],</span> <span class="p">(</span><span class="n">bottom</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">5</span><span class="p">,</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">25</span><span class="p">),</span> <span class="p">(</span><span class="n">bottom</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">5</span><span class="p">,</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">25</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">txt</span><span class="p">(</span><span class="s">"N"</span><span class="p">,</span> <span class="p">(</span><span class="n">bottom</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">40</span><span class="p">),</span> <span class="n">C</span><span class="p">[</span><span class="s">"IN"</span><span class="p">])</span>

    <span class="c1"># DC Output connections - SHORT 20px wires with labels
</span>    <span class="c1"># Positive output - short line to right from right point
</span>    <span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">active_color</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="p">(</span><span class="n">right</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">20</span><span class="p">,</span> <span class="n">right</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="mi">5</span><span class="p">)</span>
    <span class="n">txt</span><span class="p">(</span><span class="s">"-"</span><span class="p">,</span> <span class="p">(</span><span class="n">right</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">35</span><span class="p">,</span> <span class="n">right</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="n">C</span><span class="p">[</span><span class="s">"OUT"</span><span class="p">])</span>
    
    <span class="c1"># Negative output - short line to left from left point
</span>    <span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">active_color</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="p">(</span><span class="n">left</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">20</span><span class="p">,</span> <span class="n">left</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="mi">5</span><span class="p">)</span>
    <span class="n">txt</span><span class="p">(</span><span class="s">"+"</span><span class="p">,</span> <span class="p">(</span><span class="n">left</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">35</span><span class="p">,</span> <span class="n">left</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="n">C</span><span class="p">[</span><span class="s">"OUT"</span><span class="p">])</span>

    <span class="c1"># Load resistor - placed INSIDE bridge width
</span>    <span class="n">load_width</span><span class="p">,</span> <span class="n">load_height</span> <span class="o">=</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">40</span>
    <span class="n">load_x</span><span class="p">,</span> <span class="n">load_y</span> <span class="o">=</span> <span class="n">center_x</span><span class="p">,</span> <span class="n">center_y</span>
    
    <span class="c1"># Draw load resistor with active color
</span>    <span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">active_color</span><span class="p">,</span> <span class="p">(</span><span class="n">load_x</span> <span class="o">-</span> <span class="n">load_width</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">load_y</span> <span class="o">-</span> <span class="n">load_height</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> 
                            <span class="n">load_width</span><span class="p">,</span> <span class="n">load_height</span><span class="p">),</span> <span class="mi">3</span><span class="p">)</span>
    <span class="n">txt</span><span class="p">(</span><span class="s">"Load"</span><span class="p">,</span> <span class="p">(</span><span class="n">load_x</span><span class="p">,</span> <span class="n">load_y</span><span class="p">),</span> <span class="n">active_color</span><span class="p">)</span>
    
    <span class="c1"># Connect load to bridge - short connections with active color
</span>    <span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">active_color</span><span class="p">,</span> <span class="p">(</span><span class="n">right</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">3</span><span class="p">,</span> <span class="n">right</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> 
              <span class="p">(</span><span class="n">load_x</span> <span class="o">+</span> <span class="n">load_width</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">load_y</span><span class="p">),</span> <span class="mi">5</span><span class="p">)</span>
    <span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">active_color</span><span class="p">,</span> <span class="p">(</span><span class="n">left</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="n">left</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> 
              <span class="p">(</span><span class="n">load_x</span> <span class="o">-</span> <span class="n">load_width</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">load_y</span><span class="p">),</span> <span class="mi">5</span><span class="p">)</span>

    <span class="c1"># Add current flow animation (small moving dots) - REVERSED DIRECTION
</span>    <span class="n">dot_phase</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="o">%</span> <span class="mi">20</span>
    <span class="n">dot_size</span> <span class="o">=</span> <span class="mi">6</span>
    <span class="k">if</span> <span class="n">is_positive_half</span><span class="p">:</span>
        <span class="c1"># Positive half current flow: Live ‚Üí D1 ‚Üí Positive ‚Üí Load ‚Üí Negative ‚Üí D4 ‚Üí Neutral
</span>        <span class="k">if</span> <span class="n">dot_phase</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
            <span class="c1"># First segment: Live to Positive via D1 (REVERSED: now from Positive to Live)
</span>            <span class="n">progress</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="n">dot_phase</span> <span class="o">/</span> <span class="mi">10</span><span class="p">)</span>  <span class="c1"># Reverse progress
</span>            <span class="n">dot_x</span> <span class="o">=</span> <span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">right</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">*</span> <span class="n">progress</span>
            <span class="n">dot_y</span> <span class="o">=</span> <span class="n">top</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">right</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">top</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">*</span> <span class="n">progress</span>
            <span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">active_color</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">dot_x</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">dot_y</span><span class="p">)),</span> <span class="n">dot_size</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># Second segment: Negative to Neutral via D4 (REVERSED: now from Neutral to Negative)
</span>            <span class="n">progress</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">((</span><span class="n">dot_phase</span> <span class="o">-</span> <span class="mi">10</span><span class="p">)</span> <span class="o">/</span> <span class="mi">10</span><span class="p">)</span>  <span class="c1"># Reverse progress
</span>            <span class="n">dot_x</span> <span class="o">=</span> <span class="n">left</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">bottom</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">left</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">*</span> <span class="n">progress</span>
            <span class="n">dot_y</span> <span class="o">=</span> <span class="n">left</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">bottom</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">left</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">*</span> <span class="n">progress</span>
            <span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">active_color</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">dot_x</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">dot_y</span><span class="p">)),</span> <span class="n">dot_size</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Negative half current flow: Neutral ‚Üí D3 ‚Üí Positive ‚Üí Load ‚Üí Negative ‚Üí D2 ‚Üí Live
</span>        <span class="k">if</span> <span class="n">dot_phase</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">:</span>
            <span class="c1"># First segment: Neutral to Positive via D3 (REVERSED: now from Positive to Neutral)
</span>            <span class="n">progress</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="n">dot_phase</span> <span class="o">/</span> <span class="mi">10</span><span class="p">)</span>  <span class="c1"># Reverse progress
</span>            <span class="n">dot_x</span> <span class="o">=</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">right</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">*</span> <span class="n">progress</span>
            <span class="n">dot_y</span> <span class="o">=</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">right</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">bottom</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">*</span> <span class="n">progress</span>
            <span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">active_color</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">dot_x</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">dot_y</span><span class="p">)),</span> <span class="n">dot_size</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># Second segment: Negative to Live via D2 (REVERSED: now from Live to Negative)
</span>            <span class="n">progress</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">((</span><span class="n">dot_phase</span> <span class="o">-</span> <span class="mi">10</span><span class="p">)</span> <span class="o">/</span> <span class="mi">10</span><span class="p">)</span>  <span class="c1"># Reverse progress
</span>            <span class="n">dot_x</span> <span class="o">=</span> <span class="n">left</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">top</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">left</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">*</span> <span class="n">progress</span>
            <span class="n">dot_y</span> <span class="o">=</span> <span class="n">left</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">top</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">left</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">*</span> <span class="n">progress</span>
            <span class="n">draw</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">active_color</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">dot_x</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">dot_y</span><span class="p">)),</span> <span class="n">dot_size</span><span class="p">)</span>

    <span class="c1"># Add title and description
</span>    <span class="n">txt</span><span class="p">(</span><span class="s">"Full Wave Bridge Rectifier"</span><span class="p">,</span> <span class="p">(</span><span class="n">cx</span><span class="p">,</span> <span class="mi">50</span><span class="p">),</span> <span class="n">C</span><span class="p">[</span><span class="s">"WIRE"</span><span class="p">])</span>
    <span class="n">txt</span><span class="p">(</span><span class="s">"AC to DC Conversion"</span><span class="p">,</span> <span class="p">(</span><span class="n">cx</span><span class="p">,</span> <span class="mi">90</span><span class="p">),</span> <span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">))</span>
    
    <span class="c1"># Add connection indicators (adjusted positions)
</span>    <span class="n">txt</span><span class="p">(</span><span class="s">"AC Input"</span><span class="p">,</span> <span class="p">(</span><span class="n">cx</span><span class="p">,</span> <span class="n">center_y</span> <span class="o">-</span> <span class="n">radius</span> <span class="o">-</span> <span class="mi">60</span><span class="p">),</span> <span class="n">C</span><span class="p">[</span><span class="s">"IN"</span><span class="p">])</span>
    <span class="n">txt</span><span class="p">(</span><span class="s">"DC Output"</span><span class="p">,</span> <span class="p">(</span><span class="n">cx</span><span class="p">,</span> <span class="n">center_y</span> <span class="o">+</span> <span class="n">radius</span> <span class="o">+</span> <span class="mi">60</span><span class="p">),</span> <span class="n">C</span><span class="p">[</span><span class="s">"OUT"</span><span class="p">])</span>
    
    <span class="c1"># Show current path description
</span>    <span class="k">if</span> <span class="n">is_positive_half</span><span class="p">:</span>
        <span class="n">path_text</span> <span class="o">=</span> <span class="s">"Current Path (Blue): Live ‚Üí D1 ‚Üí (+) ‚Üí Load ‚Üí (-) ‚Üí D4 ‚Üí Neutral"</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">path_text</span> <span class="o">=</span> <span class="s">"Current Path (Red): Neutral ‚Üí D3 ‚Üí (+) ‚Üí Load ‚Üí (-) ‚Üí D2 ‚Üí Live"</span>
    <span class="n">txt</span><span class="p">(</span><span class="n">path_text</span><span class="p">,</span> <span class="p">(</span><span class="n">cx</span><span class="p">,</span> <span class="n">H</span> <span class="o">-</span> <span class="mi">50</span><span class="p">),</span> <span class="n">active_color</span><span class="p">)</span>

<span class="c1"># Main Loop
</span><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">pygame</span><span class="p">.</span><span class="n">event</span><span class="p">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">e</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">QUIT</span> <span class="ow">or</span> \
           <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">KEYDOWN</span> <span class="ow">and</span> <span class="n">e</span><span class="p">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">K_ESCAPE</span><span class="p">):</span>
            <span class="n">pygame</span><span class="p">.</span><span class="n">quit</span><span class="p">();</span> <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>

    <span class="n">S</span><span class="p">.</span><span class="n">fill</span><span class="p">(</span><span class="n">C</span><span class="p">[</span><span class="s">"BG"</span><span class="p">])</span>
    <span class="n">waves</span><span class="p">(</span><span class="n">phase</span><span class="p">)</span>
    <span class="n">phase</span> <span class="o">+=</span> <span class="n">speed</span>
    <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">flip</span><span class="p">()</span>
    <span class="n">clk</span><span class="p">.</span><span class="n">tick</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="how-to-run">How to Run</h2>

<ol>
  <li>Install <strong>Pygame</strong> if you haven‚Äôt already:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>pygame
</code></pre></div>    </div>
  </li>
  <li>Save the script as <code class="language-plaintext highlighter-rouge">rectifier_sim.py</code>.</li>
  <li>Run it:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python rectifier_sim.py
</code></pre></div>    </div>
  </li>
  <li>Press <strong>[ESC]</strong> to quit.</li>
</ol>

<h2 id="key-learnings">Key Learnings</h2>

<ul>
  <li>How a <strong>Full Wave Bridge Rectifier</strong> works.</li>
  <li>How to <strong>simulate electric circuits visually</strong> using Python.</li>
  <li>Using <strong>Pygame for animation</strong> and dynamic drawing.</li>
  <li>Representing <strong>waveforms and logic</strong> through geometry and color.</li>
</ul>

<h2 id="further-ideas">Further Ideas</h2>

<p>Here are some fun ways to extend the project:</p>

<ul>
  <li>Add a <strong>filter capacitor</strong> to smooth the output waveform.</li>
  <li>Display a <strong>moving average</strong> of the output voltage.</li>
  <li>Add <strong>sound effects</strong> when current changes direction.</li>
  <li>Show <strong>voltage vs time graph</strong> side-by-side with the circuit.</li>
</ul>

<h2 id="credits">Credits</h2>

<p>Developed by <strong>PyShine</strong> ‚Äî bringing electronics and Python to life through visual learning!</p>

<p>If you found this helpful, consider subscribing to <a href="https://www.youtube.com/@pyshine_official">PyShine on YouTube</a>  for more fun Python projects.</p>

<p><strong>Happy Coding &amp; Keep Learning! ‚ö°</strong></p>]]></content><author><name>PyShine Team</name></author><category term="ad-to-dc" /><category term="full-wave-bridge" /><category term="ac dc rectifier simulation" /><summary type="html"><![CDATA[Full Bridge AC/DC four Diodes based Rectifier]]></summary></entry><entry><title type="html">How to make a GPS Satellite Simulation in Python</title><link href="https://www.pyshine.com/How-to-Simulate-GPS-Satellites/" rel="alternate" type="text/html" title="How to make a GPS Satellite Simulation in Python" /><published>2025-10-24T00:00:00+00:00</published><updated>2025-10-24T00:00:00+00:00</updated><id>https://www.pyshine.com/How-to-Simulate-GPS-Satellites</id><content type="html" xml:base="https://www.pyshine.com/How-to-Simulate-GPS-Satellites/"><![CDATA[<p>For more details:</p>
<h3 id="check-out-our-youtube-short">Check out our YouTube Short!</h3>

<div style="text-align:center;">
  <iframe width="320" height="568" src="https://www.youtube.com/embed/-LxLf4hZzHY?rel=0&amp;autoplay=0" title="YouTube Short" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
  </iframe>
</div>

<h1 id="3d-visualization-of-a-gps-satellite-constellation">3D Visualization of a GPS Satellite Constellation</h1>

<p><strong>A detailed, step-by-step tutorial and annotated markdown blog</strong> that explains a VPython script which renders a 3D visualization of the GPS satellite constellation (24 operational satellites shown across 6 orbital planes). This tutorial covers setup, math, per-line code explanation, optimization tips, debugging, and suggested extensions.</p>

<h2 id="overview">Overview</h2>

<p>The script creates a <strong>3D animation of GPS satellites</strong> orbiting Earth using VPython. It models the <strong>real GPS constellation</strong> with six orbital planes, each containing four satellites, at an altitude of about 20,180 km. The satellites orbit with a 55¬∞ inclination and leave colorful trails to show their paths.</p>

<h2 id="requirements">Requirements</h2>

<p>To run this visualization, you need:</p>

<ul>
  <li>Python 3.8+</li>
  <li>The <code class="language-plaintext highlighter-rouge">vpython</code> library</li>
</ul>

<p>Install it via pip:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>vpython
</code></pre></div></div>

<blockquote>
  <p>VPython runs in a browser or a standalone window depending on your setup.</p>
</blockquote>

<h2 id="full-source-code">Full Source Code</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">vpython</span> <span class="kn">import</span> <span class="n">sphere</span><span class="p">,</span> <span class="n">vector</span><span class="p">,</span> <span class="n">rate</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> \
    <span class="n">textures</span><span class="p">,</span> <span class="n">label</span><span class="p">,</span> <span class="n">canvas</span><span class="p">,</span> <span class="n">cylinder</span><span class="p">,</span> <span class="n">mag</span>
<span class="kn">import</span> <span class="nn">math</span>

<span class="c1"># Scene setup
</span><span class="n">scene</span> <span class="o">=</span> <span class="n">canvas</span><span class="p">(</span>
    <span class="n">title</span> <span class="o">=</span> <span class="s">"GPS Satellites:24 | Orbital Planes: 6"</span><span class="p">,</span>
    <span class="n">width</span> <span class="o">=</span> <span class="mi">400</span><span class="p">,</span>
    <span class="n">height</span> <span class="o">=</span> <span class="mi">600</span><span class="p">,</span>
    <span class="n">background</span> <span class="o">=</span> <span class="n">color</span><span class="p">.</span><span class="n">black</span><span class="p">,</span>
    <span class="n">center</span> <span class="o">=</span> <span class="n">vector</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
<span class="p">)</span>

<span class="c1"># Earth and GPS parameters
</span><span class="n">EARTH_RADIUS</span> <span class="o">=</span> <span class="mf">6371e3</span> <span class="c1"># 6,371 km
</span><span class="n">GPS_ALTITUDE</span> <span class="o">=</span> <span class="mf">20180e3</span> <span class="c1"># 20,180 km
</span><span class="n">GPS_RADIUS</span> <span class="o">=</span> <span class="n">EARTH_RADIUS</span> <span class="o">+</span> <span class="n">GPS_ALTITUDE</span>
<span class="n">SCALE</span> <span class="o">=</span> <span class="mf">1e-7</span>
<span class="n">DISP_R</span> <span class="o">=</span> <span class="n">EARTH_RADIUS</span> <span class="o">*</span> <span class="n">SCALE</span>
<span class="n">DISPLAY_GPS_RADIUS</span> <span class="o">=</span> <span class="n">GPS_RADIUS</span> <span class="o">*</span> <span class="n">SCALE</span>

<span class="c1"># Orbital parameters
</span><span class="n">GPS_ORBITAL_PERIOD</span> <span class="o">=</span> <span class="mi">43080</span> <span class="c1"># seconds (11h 58m)
</span><span class="n">SPEED_FACTOR</span> <span class="o">=</span> <span class="mi">3000</span> <span class="c1"># Time scale multiplier for visuals
</span><span class="n">TIME_STEP</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">60</span>
<span class="n">omega_gps</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">pi</span> <span class="o">/</span> <span class="n">GPS_ORBITAL_PERIOD</span> <span class="o">*</span> <span class="n">SPEED_FACTOR</span>

<span class="c1"># Create Earth
</span><span class="n">earth</span> <span class="o">=</span> <span class="n">sphere</span><span class="p">(</span><span class="n">radius</span> <span class="o">=</span> <span class="n">DISP_R</span><span class="p">,</span>
               <span class="n">texture</span><span class="o">=</span><span class="n">textures</span><span class="p">.</span><span class="n">earth</span><span class="p">,</span>
               <span class="n">shininess</span><span class="o">=</span><span class="mf">0.1</span><span class="p">)</span>

<span class="c1"># Create GPS satellites
</span><span class="n">num_planes</span> <span class="o">=</span> <span class="mi">6</span>
<span class="n">sats_per_plane</span> <span class="o">=</span> <span class="mi">4</span>
<span class="n">total_satellites</span> <span class="o">=</span> <span class="n">num_planes</span> <span class="o">*</span> <span class="n">sats_per_plane</span>
<span class="n">satellites</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">sat_labels</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">connection_lines</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1"># Colors for each plane
</span><span class="n">plane_colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">color</span><span class="p">.</span><span class="n">red</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">orange</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">yellow</span><span class="p">,</span>
                <span class="n">color</span><span class="p">.</span><span class="n">green</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">cyan</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">magenta</span><span class="p">]</span>

<span class="n">inclination</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">radians</span><span class="p">(</span><span class="mi">55</span><span class="p">)</span>
<span class="n">satellite_count</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">plane</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_planes</span><span class="p">):</span>
    <span class="n">raan</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">plane</span> <span class="o">/</span> <span class="n">num_planes</span>  <span class="c1"># RAAN evenly spaced
</span>    <span class="k">for</span> <span class="n">sat_in_plane</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sats_per_plane</span><span class="p">):</span>
        <span class="n">true_anomaly</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">pi</span> <span class="o">*</span> <span class="n">sat_in_plane</span> <span class="o">/</span> <span class="n">sats_per_plane</span>
        
        <span class="n">sat</span> <span class="o">=</span> <span class="n">sphere</span><span class="p">(</span>
            <span class="n">radius</span> <span class="o">=</span> <span class="n">DISP_R</span> <span class="o">*</span> <span class="mf">0.1</span><span class="p">,</span>
            <span class="n">color</span> <span class="o">=</span> <span class="n">color</span><span class="p">.</span><span class="n">white</span><span class="p">,</span>
            <span class="n">make_trail</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
            <span class="n">trail_type</span> <span class="o">=</span> <span class="s">"curve"</span><span class="p">,</span>
            <span class="n">trail_radius</span> <span class="o">=</span> <span class="n">DISP_R</span> <span class="o">*</span> <span class="mf">0.025</span><span class="p">,</span>
            <span class="n">trail_color</span> <span class="o">=</span> <span class="n">plane_colors</span><span class="p">[</span><span class="n">plane</span><span class="p">],</span>
            <span class="n">retain</span><span class="o">=</span><span class="mi">2000</span>
        <span class="p">)</span>

        <span class="n">sat_label</span> <span class="o">=</span> <span class="n">label</span><span class="p">(</span>
            <span class="n">pos</span> <span class="o">=</span> <span class="n">vector</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span>
            <span class="n">text</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"GPS </span><span class="si">{</span><span class="n">satellite_count</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s">"</span><span class="p">,</span>
            <span class="n">color</span> <span class="o">=</span> <span class="n">plane_colors</span><span class="p">[</span><span class="n">plane</span><span class="p">],</span>
            <span class="n">box</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
            <span class="n">line</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
            <span class="n">height</span><span class="o">=</span><span class="mi">10</span>
        <span class="p">)</span>

        <span class="n">connection_line</span> <span class="o">=</span> <span class="n">cylinder</span><span class="p">(</span>
            <span class="n">radius</span> <span class="o">=</span> <span class="n">DISP_R</span> <span class="o">*</span> <span class="mf">0.005</span><span class="p">,</span>
            <span class="n">color</span> <span class="o">=</span> <span class="n">plane_colors</span><span class="p">[</span><span class="n">plane</span><span class="p">],</span>
            <span class="n">opacity</span> <span class="o">=</span> <span class="mf">0.6</span>
        <span class="p">)</span>

        <span class="n">sat</span><span class="p">.</span><span class="n">raan</span> <span class="o">=</span> <span class="n">raan</span>
        <span class="n">sat</span><span class="p">.</span><span class="n">true_anomaly</span> <span class="o">=</span> <span class="n">true_anomaly</span>
        <span class="n">sat</span><span class="p">.</span><span class="n">plane</span> <span class="o">=</span> <span class="n">plane</span>
        <span class="n">satellites</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">sat</span><span class="p">)</span>
        <span class="n">sat_labels</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">sat_label</span><span class="p">)</span>
        <span class="n">connection_lines</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">connection_line</span><span class="p">)</span>
        <span class="n">satellite_count</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Created </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">satellites</span><span class="p">)</span><span class="si">}</span><span class="s"> GPS satellites in </span><span class="si">{</span><span class="n">num_planes</span><span class="si">}</span><span class="s"> orbital planes"</span><span class="p">)</span>

<span class="c1"># Simulation loop
</span><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">rate</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>
    <span class="n">earth</span><span class="p">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">angle</span><span class="o">=</span><span class="mf">0.001</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="n">vector</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>

    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">sat</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">satellites</span><span class="p">):</span>
        <span class="n">sat</span><span class="p">.</span><span class="n">true_anomaly</span> <span class="o">+=</span> <span class="n">omega_gps</span> <span class="o">*</span> <span class="n">TIME_STEP</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">DISPLAY_GPS_RADIUS</span>

        <span class="c1"># Position in orbital plane
</span>        <span class="n">x_orb</span> <span class="o">=</span> <span class="n">r</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">cos</span><span class="p">(</span><span class="n">sat</span><span class="p">.</span><span class="n">true_anomaly</span><span class="p">)</span>
        <span class="n">y_orb</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">z_orb</span> <span class="o">=</span> <span class="n">r</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">sat</span><span class="p">.</span><span class="n">true_anomaly</span><span class="p">)</span>

        <span class="c1"># Apply inclination rotation
</span>        <span class="n">x_incl</span> <span class="o">=</span> <span class="n">x_orb</span>
        <span class="n">y_incl</span> <span class="o">=</span> <span class="n">y_orb</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">cos</span><span class="p">(</span><span class="n">inclination</span><span class="p">)</span> <span class="o">-</span> <span class="n">z_orb</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">inclination</span><span class="p">)</span>
        <span class="n">z_incl</span> <span class="o">=</span> <span class="n">y_orb</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">inclination</span><span class="p">)</span> <span class="o">+</span> <span class="n">z_orb</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">cos</span><span class="p">(</span><span class="n">inclination</span><span class="p">)</span>

        <span class="c1"># Apply RAAN rotation
</span>        <span class="n">x_final</span> <span class="o">=</span> <span class="n">x_incl</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">cos</span><span class="p">(</span><span class="n">sat</span><span class="p">.</span><span class="n">raan</span><span class="p">)</span> <span class="o">-</span> <span class="n">y_incl</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">sat</span><span class="p">.</span><span class="n">raan</span><span class="p">)</span>
        <span class="n">y_final</span> <span class="o">=</span> <span class="n">x_incl</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">sat</span><span class="p">.</span><span class="n">raan</span><span class="p">)</span> <span class="o">+</span> <span class="n">y_incl</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">cos</span><span class="p">(</span><span class="n">sat</span><span class="p">.</span><span class="n">raan</span><span class="p">)</span>
        <span class="n">z_final</span> <span class="o">=</span> <span class="n">z_incl</span>

        <span class="n">sat</span><span class="p">.</span><span class="n">pos</span> <span class="o">=</span> <span class="n">vector</span><span class="p">(</span><span class="n">x_final</span><span class="p">,</span> <span class="n">y_final</span><span class="p">,</span> <span class="n">z_final</span><span class="p">)</span>
        <span class="n">sat_labels</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">pos</span> <span class="o">=</span> <span class="n">sat</span><span class="p">.</span><span class="n">pos</span> <span class="o">+</span> <span class="n">vector</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">DISP_R</span> <span class="o">*</span> <span class="mf">0.5</span> <span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">mag</span><span class="p">(</span><span class="n">sat</span><span class="p">.</span><span class="n">pos</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">sat_dir</span> <span class="o">=</span> <span class="n">sat</span><span class="p">.</span><span class="n">pos</span> <span class="o">/</span> <span class="n">mag</span><span class="p">(</span><span class="n">sat</span><span class="p">.</span><span class="n">pos</span><span class="p">)</span>
            <span class="n">ground_point</span> <span class="o">=</span> <span class="n">sat_dir</span> <span class="o">*</span> <span class="n">DISP_R</span>
            <span class="n">connection_lines</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">pos</span> <span class="o">=</span> <span class="n">ground_point</span>
            <span class="n">connection_lines</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">axis</span> <span class="o">=</span> <span class="n">sat</span><span class="p">.</span><span class="n">pos</span> <span class="o">-</span> <span class="n">ground_point</span>

        <span class="k">if</span> <span class="n">sat</span><span class="p">.</span><span class="n">true_anomaly</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">pi</span><span class="p">:</span>
            <span class="n">sat</span><span class="p">.</span><span class="n">true_anomaly</span> <span class="o">-=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="n">pi</span>
            <span class="n">sat</span><span class="p">.</span><span class="n">clear_trail</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="detailed-explanation">Detailed Explanation</h2>

<h3 id="scene-and-scale">Scene and Scale</h3>

<p>We use a <code class="language-plaintext highlighter-rouge">canvas</code> as our 3D scene and apply scaling to shrink Earth‚Äôs real radius (6,371 km) and orbit altitude (20,180 km) to manageable VPython units using <code class="language-plaintext highlighter-rouge">SCALE = 1e-7</code>. This keeps visual proportions correct while fitting in the viewport.</p>

<h3 id="orbital-parameters">Orbital Parameters</h3>

<p>The GPS system uses:</p>
<ul>
  <li><strong>6 orbital planes</strong> separated by 60¬∞ in RAAN.</li>
  <li><strong>4 satellites per plane</strong>, spaced 90¬∞ apart in true anomaly.</li>
  <li><strong>Inclination:</strong> 55¬∞ relative to Earth‚Äôs equator.</li>
  <li><strong>Orbital Period:</strong> ~12 hours.</li>
</ul>

<p>To make orbits visible, we scale the angular speed by <code class="language-plaintext highlighter-rouge">SPEED_FACTOR = 3000</code> so satellites complete revolutions faster.</p>

<h3 id="satellite-initialization">Satellite Initialization</h3>

<p>Each satellite is created as a small white <code class="language-plaintext highlighter-rouge">sphere</code> with a colored trail. The color corresponds to its orbital plane. We also attach a <code class="language-plaintext highlighter-rouge">label</code> above each satellite and a <code class="language-plaintext highlighter-rouge">cylinder</code> line connecting it to Earth‚Äôs surface.</p>

<p>The nested loop structure:</p>
<ul>
  <li>Outer loop (<code class="language-plaintext highlighter-rouge">plane</code>) sets the plane‚Äôs RAAN.</li>
  <li>Inner loop (<code class="language-plaintext highlighter-rouge">sat_in_plane</code>) places satellites evenly spaced in that plane.</li>
</ul>

<p>We store each satellite‚Äôs RAAN, true anomaly, and plane index for later updates.</p>

<h3 id="orbital-motion">Orbital Motion</h3>

<p>Each frame (at 60 FPS):</p>
<ol>
  <li>Increment the true anomaly based on angular velocity.</li>
  <li>Compute the position in the orbital plane.</li>
  <li>Apply two rotations:
    <ul>
      <li><strong>Inclination rotation</strong> around the x-axis.</li>
      <li><strong>RAAN rotation</strong> around the z-axis.</li>
    </ul>
  </li>
  <li>Update the satellite‚Äôs position.</li>
  <li>Update its label and connection line.</li>
  <li>Reset the trail after completing a full orbit.</li>
</ol>

<h3 id="earth-rotation">Earth Rotation</h3>

<p>The Earth sphere is rotated slowly with:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">earth</span><span class="p">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">angle</span><span class="o">=</span><span class="mf">0.001</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="n">vector</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
</code></pre></div></div>
<p>This simulates Earth‚Äôs spin and adds realism.</p>

<h2 id="mathematical-summary">Mathematical Summary</h2>

<table>
  <thead>
    <tr>
      <th>Step</th>
      <th>Rotation Axis</th>
      <th>Formula</th>
      <th>Purpose</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>X-axis</td>
      <td>y‚Äô = y<em>cos(i) - z</em>sin(i)</td>
      <td>Inclination rotation</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Z-axis</td>
      <td>x‚Äô‚Äô = x‚Äô<em>cos(Œ©) - y‚Äô</em>sin(Œ©)</td>
      <td>RAAN rotation</td>
    </tr>
  </tbody>
</table>

<p><code class="language-plaintext highlighter-rouge">Œ©</code> (RAAN) shifts the orbital plane around Earth‚Äôs z-axis. <code class="language-plaintext highlighter-rouge">i</code> (inclination) tilts the plane.</p>

<h2 id="performance-tips">Performance Tips</h2>

<ul>
  <li>Reduce <code class="language-plaintext highlighter-rouge">retain</code> in trails to &lt;1000 to save memory.</li>
  <li>Use <code class="language-plaintext highlighter-rouge">rate(30)</code> if animation is slow.</li>
  <li>Decrease number of satellites for testing.</li>
  <li>Avoid frequent creation/deletion of VPython objects inside the loop.</li>
</ul>

<h2 id="enhancements-you-can-try">Enhancements You Can Try</h2>

<ol>
  <li><strong>Add real-time controls:</strong> buttons for pause/resume, orbit speed, and trail toggle.</li>
  <li><strong>Add real GPS data:</strong> parse TLE files for actual satellite positions.</li>
  <li><strong>Add ground stations:</strong> show visible satellites from a chosen location.</li>
  <li><strong>Add camera animation:</strong> orbit camera around Earth.</li>
</ol>

<h2 id="summary">Summary</h2>

<p>This VPython project demonstrates how to visualize satellite constellations in 3D. You learned:</p>
<ul>
  <li>How to model orbital planes and inclination.</li>
  <li>How to use VPython primitives (<code class="language-plaintext highlighter-rouge">sphere</code>, <code class="language-plaintext highlighter-rouge">cylinder</code>, <code class="language-plaintext highlighter-rouge">label</code>).</li>
  <li>How to simulate orbital motion using angular updates.</li>
</ul>

<p>It‚Äôs a powerful educational example for both orbital mechanics and real-time 3D visualization in Python.</p>]]></content><author><name>PyShine Team</name></author><category term="gps satellites" /><category term="vpython tutorial" /><category term="gps satellites basic tutorial" /><summary type="html"><![CDATA[Visualizing GPS satellites in 3D]]></summary></entry><entry><title type="html">Recursive function to grow TREE in Python</title><link href="https://www.pyshine.com/How-to-make-Fibonacci-Tree/" rel="alternate" type="text/html" title="Recursive function to grow TREE in Python" /><published>2025-10-24T00:00:00+00:00</published><updated>2025-10-24T00:00:00+00:00</updated><id>https://www.pyshine.com/How-to-make-Fibonacci-Tree</id><content type="html" xml:base="https://www.pyshine.com/How-to-make-Fibonacci-Tree/"><![CDATA[<h1 id="fibonacci-tree-growth-multithreaded">Fibonacci Tree Growth (Multithreaded)</h1>

<blockquote>
  <p>A detailed, step-by-step tutorial explaining a Pygame program that draws a Fibonacci-based tree. This tutorial shows how the original recursive growth works and how to modify it so branches grow in parallel using multithreading (safe and practical approach).</p>
</blockquote>

<h2 id="table-of-contents">Table of contents</h2>

<h2 id="table-of-contents-1">Table of Contents</h2>
<ul>
  <li><a href="#1-introduction">Introduction</a></li>
  <li><a href="#2-prerequisites">Prerequisites</a></li>
  <li><a href="#3-project-structure">Project Structure</a></li>
  <li><a href="#4-simple-code">Full Original Code</a></li>
  <li><a href="#5-deep-explanation--line-by-line-and-concept-by-concept">Deep Explanation ‚Äî Line by Line and Concept by Concept</a></li>
  <li><a href="#6-why-and-when-to-parallelize">Why and When to Parallelize</a></li>
  <li><a href="#7-design-choices-for-multithreading">Design Choices for Multithreading</a></li>
  <li><a href="#8-multithreaded-implementation--full-code">Multithreaded Implementation ‚Äî Full Code</a></li>
  <li><a href="#9-how-to-run-and-test">How to Run and Test</a></li>
  <li><a href="#10-performance-considerations--debugging-tips">Performance Considerations &amp; Debugging Tips</a></li>
  <li><a href="#11-faq-and-closing-notes">FAQ and Closing Notes</a></li>
</ul>

<h2 id="1-introduction">1. Introduction</h2>

<p>This tutorial teaches you how a small Pygame program simulates a fractal, Fibonacci-based tree. Branch lengths and spreads follow Fibonacci-derived ratios so the resulting shape looks natural and organic.</p>

<p>You‚Äôll see:</p>
<ul>
  <li>How the recursive <code class="language-plaintext highlighter-rouge">grow()</code> function builds branches.</li>
  <li>Why some branches look thicker or greener.</li>
  <li>How to convert the growth stage into parallel tasks so multiple branches can be computed at the same time, using Python threads.</li>
</ul>

<p>The tutorial ends with a complete multithreaded version ready to copy and run.</p>

<h2 id="2-prerequisites">2. Prerequisites</h2>

<ul>
  <li>Python 3.8+ (works well with 3.10 / 3.11)</li>
  <li><code class="language-plaintext highlighter-rouge">pygame</code> installed (<code class="language-plaintext highlighter-rouge">pip install pygame</code>)</li>
  <li>Basic knowledge of Python functions and threading concepts</li>
  <li>Optional: <code class="language-plaintext highlighter-rouge">concurrent.futures</code> familiarity</li>
</ul>

<h2 id="3-project-structure">3. Project structure</h2>

<p>Single file: <code class="language-plaintext highlighter-rouge">fibonacci_tree_parallel.py</code> . Run it with:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python fibonacci_tree_parallel.py
</code></pre></div></div>

<h2 id="4-simple-code">4. Simple code</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pygame</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">math</span><span class="p">,</span> <span class="n">random</span>

<span class="c1"># INITIAL SETUP 
</span><span class="n">pygame</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>

<span class="n">WIN_WIDTH</span><span class="p">,</span> <span class="n">WIN_HEIGHT</span> <span class="o">=</span> <span class="mi">1200</span><span class="p">,</span> <span class="mi">600</span>
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_mode</span><span class="p">((</span><span class="n">WIN_WIDTH</span><span class="p">,</span> <span class="n">WIN_HEIGHT</span><span class="p">))</span>
<span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s">"Fibonacci Tree Growth"</span><span class="p">)</span>

<span class="c1"># COLOR DEFINITIONS 
</span><span class="n">SKY_COLOR</span>   <span class="o">=</span> <span class="p">(</span><span class="mi">135</span><span class="p">,</span> <span class="mi">206</span><span class="p">,</span> <span class="mi">235</span><span class="p">)</span>
<span class="n">BROWN_COLOR</span> <span class="o">=</span> <span class="p">(</span><span class="mi">139</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">19</span><span class="p">)</span>
<span class="n">GREEN_COLOR</span> <span class="o">=</span> <span class="p">(</span><span class="mi">34</span><span class="p">,</span> <span class="mi">139</span><span class="p">,</span> <span class="mi">34</span><span class="p">)</span>

<span class="c1"># TREE PARAMETERS 
</span><span class="n">GROUND_HEIGHT</span>   <span class="o">=</span> <span class="mi">50</span>
<span class="n">TREE_DEPTH</span>      <span class="o">=</span> <span class="mi">10</span>
<span class="n">BRANCH_WIDTH</span>    <span class="o">=</span> <span class="mi">20</span>
<span class="n">SPREAD_BASE</span>     <span class="o">=</span> <span class="mi">25</span>
<span class="n">SPREAD_FACTOR</span>   <span class="o">=</span> <span class="mi">70</span>         <span class="c1"># slightly larger spread for wider crown
</span><span class="n">LENGTH_DECAY</span>    <span class="o">=</span> <span class="mf">0.75</span>
<span class="n">LENGTH_VARIANCE</span> <span class="o">=</span> <span class="mf">0.1</span>
<span class="n">BRANCH_STEP</span>     <span class="o">=</span> <span class="mi">3</span>
<span class="n">FPS</span>             <span class="o">=</span> <span class="mi">60</span>

<span class="c1"># FONT 
</span><span class="n">font</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">font</span><span class="p">.</span><span class="n">SysFont</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="n">bold</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># GLOBALS 
</span><span class="n">branches</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">draw_step</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">started</span> <span class="o">=</span> <span class="bp">False</span>

<span class="c1"># FIBONACCI FUNCTION 
</span><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="s">"""Return the nth Fibonacci number."""</span>
    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
    <span class="k">return</span> <span class="n">a</span>

<span class="c1"># TREE GENERATION 
</span><span class="k">def</span> <span class="nf">grow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">angle</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">width</span><span class="p">):</span>
    <span class="s">"""
    Recursive Fibonacci-based branching function.
    Ensures branches stay mostly above the horizon and spread outward naturally.
    """</span>
    <span class="k">if</span> <span class="n">depth</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">length</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">:</span>
        <span class="k">return</span>

    <span class="n">rad</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">radians</span><span class="p">(</span><span class="n">angle</span><span class="p">)</span>
    <span class="n">end_x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">math</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">)</span> <span class="o">*</span> <span class="n">length</span>
    <span class="n">end_y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">-</span> <span class="n">math</span><span class="p">.</span><span class="n">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">)</span> <span class="o">*</span> <span class="n">length</span>

    <span class="c1"># prevent branches from going below the ground
</span>    <span class="k">if</span> <span class="n">end_y</span> <span class="o">&gt;</span> <span class="n">WIN_HEIGHT</span> <span class="o">-</span> <span class="n">GROUND_HEIGHT</span><span class="p">:</span>
        <span class="n">end_y</span> <span class="o">=</span> <span class="n">WIN_HEIGHT</span> <span class="o">-</span> <span class="n">GROUND_HEIGHT</span>

    <span class="c1"># add this branch
</span>    <span class="n">branches</span><span class="p">.</span><span class="n">append</span><span class="p">(((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="p">(</span><span class="n">end_x</span><span class="p">,</span> <span class="n">end_y</span><span class="p">),</span> <span class="n">width</span><span class="p">,</span> <span class="n">depth</span><span class="p">))</span>

    <span class="c1"># Fibonacci ratio scaling
</span>    <span class="n">f_ratio</span> <span class="o">=</span> <span class="n">fib</span><span class="p">(</span><span class="n">depth</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="n">fib</span><span class="p">(</span><span class="n">TREE_DEPTH</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">spread</span> <span class="o">=</span> <span class="n">SPREAD_BASE</span> <span class="o">+</span> <span class="n">SPREAD_FACTOR</span> <span class="o">*</span> <span class="n">f_ratio</span>

    <span class="c1"># number of child branches
</span>    <span class="n">sub_branches</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">%</span> <span class="mi">3</span>

    <span class="c1"># nonlinear upward bias ‚Äî keeps branches from pointing downward
</span>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sub_branches</span><span class="p">):</span>
        <span class="n">new_length</span> <span class="o">=</span> <span class="n">length</span> <span class="o">*</span> <span class="p">(</span><span class="n">LENGTH_DECAY</span> <span class="o">+</span> <span class="n">LENGTH_VARIANCE</span> <span class="o">*</span> <span class="n">f_ratio</span><span class="p">)</span>
        
        <span class="c1"># bias the angle upwards: restrict below horizontal (no downward growth)
</span>        <span class="n">bias</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">uniform</span><span class="p">(</span><span class="o">-</span><span class="n">spread</span><span class="p">,</span> <span class="n">spread</span><span class="p">)</span>
        <span class="n">new_angle</span> <span class="o">=</span> <span class="n">angle</span> <span class="o">+</span> <span class="n">bias</span>

        <span class="c1"># Clamp angles: ensure they stay above -90 (horizontal) and below 90
</span>        <span class="n">new_angle</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="o">-</span><span class="mi">70</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="mi">70</span><span class="p">,</span> <span class="n">new_angle</span><span class="p">))</span>

        <span class="n">new_width</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="mf">0.75</span><span class="p">))</span>
        <span class="n">grow</span><span class="p">(</span><span class="n">end_x</span><span class="p">,</span> <span class="n">end_y</span><span class="p">,</span> <span class="n">new_length</span><span class="p">,</span> <span class="n">new_angle</span><span class="p">,</span> <span class="n">depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">new_width</span><span class="p">)</span>

<span class="c1"># INITIAL TREE CREATION 
</span><span class="n">INITIAL_LENGTH</span> <span class="o">=</span> <span class="p">(</span><span class="n">WIN_HEIGHT</span> <span class="o">-</span> <span class="mi">120</span><span class="p">)</span> <span class="o">//</span> <span class="p">(</span><span class="n">TREE_DEPTH</span> <span class="o">*</span> <span class="mf">0.8</span><span class="p">)</span>
<span class="n">grow</span><span class="p">(</span><span class="n">WIN_WIDTH</span> <span class="o">//</span> <span class="mi">2</span><span class="p">,</span> <span class="n">WIN_HEIGHT</span> <span class="o">-</span> <span class="n">GROUND_HEIGHT</span><span class="p">,</span> <span class="n">INITIAL_LENGTH</span> <span class="o">*</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">TREE_DEPTH</span><span class="p">,</span> <span class="n">BRANCH_WIDTH</span><span class="p">)</span>

<span class="c1"># CLOCK 
</span><span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">time</span><span class="p">.</span><span class="n">Clock</span><span class="p">()</span>

<span class="c1"># MAIN LOOP 
</span><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="p">.</span><span class="n">event</span><span class="p">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="n">pygame</span><span class="p">.</span><span class="n">quit</span><span class="p">()</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">MOUSEBUTTONDOWN</span><span class="p">:</span>
            <span class="n">started</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="n">screen</span><span class="p">.</span><span class="n">fill</span><span class="p">(</span><span class="n">SKY_COLOR</span><span class="p">)</span>
    <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">GREEN_COLOR</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">WIN_HEIGHT</span> <span class="o">-</span> <span class="n">GROUND_HEIGHT</span><span class="p">,</span> <span class="n">WIN_WIDTH</span><span class="p">,</span> <span class="n">GROUND_HEIGHT</span><span class="p">))</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">started</span><span class="p">:</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">font</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="s">"CLICK TO START"</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="n">GREEN_COLOR</span><span class="p">)</span>
        <span class="n">screen</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="p">(</span><span class="n">WIN_WIDTH</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">-</span> <span class="n">msg</span><span class="p">.</span><span class="n">get_width</span><span class="p">()</span> <span class="o">//</span> <span class="mi">2</span><span class="p">,</span> <span class="n">WIN_HEIGHT</span> <span class="o">//</span> <span class="mi">2</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">draw_step</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">draw_step</span> <span class="o">+</span> <span class="n">BRANCH_STEP</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">branches</span><span class="p">))</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">depth</span><span class="p">)</span> <span class="ow">in</span> <span class="n">branches</span><span class="p">[:</span><span class="n">draw_step</span><span class="p">]:</span>
            <span class="k">if</span> <span class="n">depth</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">:</span>
                <span class="n">color</span> <span class="o">=</span> <span class="n">BROWN_COLOR</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">color</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span>
                    <span class="nb">int</span><span class="p">(</span><span class="n">BROWN_COLOR</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="p">((</span><span class="n">depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="n">GREEN_COLOR</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="n">depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">4</span><span class="p">))</span>
                    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
                <span class="p">)</span>
            <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>

        <span class="n">text</span> <span class="o">=</span> <span class="n">font</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="sa">f</span><span class="s">"BRANCH COUNT: </span><span class="si">{</span><span class="n">draw_step</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="n">GREEN_COLOR</span><span class="p">)</span>
        <span class="n">screen</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="p">(</span><span class="n">WIN_WIDTH</span> <span class="o">-</span> <span class="n">text</span><span class="p">.</span><span class="n">get_width</span><span class="p">()</span> <span class="o">-</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>

    <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">flip</span><span class="p">()</span>
    <span class="n">clock</span><span class="p">.</span><span class="n">tick</span><span class="p">(</span><span class="n">FPS</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="5-deep-explanation--line-by-line-and-concept-by-concept">5. Deep explanation ‚Äî line by line and concept by concept</h2>

<p>I‚Äôll walk through the important pieces and why they exist.</p>

<h3 id="a-initialization-and-constants">a) Initialization and constants</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">pygame.init()</code> starts Pygame.</li>
  <li><code class="language-plaintext highlighter-rouge">WIN_WIDTH</code>, <code class="language-plaintext highlighter-rouge">WIN_HEIGHT</code> ‚Äî screen size.</li>
  <li>Color constants defined as RGB tuples.</li>
  <li>Tree parameters such as <code class="language-plaintext highlighter-rouge">TREE_DEPTH</code>, <code class="language-plaintext highlighter-rouge">BRANCH_WIDTH</code>, <code class="language-plaintext highlighter-rouge">SPREAD_BASE</code>, etc., control how deep the recursion goes, how thick branches start, and how widely they spread.</li>
</ul>

<p><strong>Tip:</strong> Keep <code class="language-plaintext highlighter-rouge">TREE_DEPTH</code> moderate (7‚Äì12). Too large creates many branches and can slow rendering and thread overhead.</p>

<h3 id="b-fibonacci-function">b) Fibonacci function</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
    <span class="k">return</span> <span class="n">a</span>
</code></pre></div></div>

<ul>
  <li>Returns the nth Fibonacci number (1-indexed here).</li>
  <li>Used to compute ratios that change with depth ‚Äî making lower/higher branches differ organically.</li>
</ul>

<h3 id="c-recursive-growth-grow">c) Recursive growth: <code class="language-plaintext highlighter-rouge">grow()</code></h3>

<p><code class="language-plaintext highlighter-rouge">grow(x, y, length, angle, depth, width)</code> does the heavy lifting.</p>

<p>Key steps inside:</p>
<ol>
  <li>Base case: stop when depth &lt;= 0 or length is tiny.</li>
  <li>Compute end coordinates using trigonometry:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">end_x = x + sin(angle) * length</code></li>
      <li><code class="language-plaintext highlighter-rouge">end_y = y - cos(angle) * length</code></li>
    </ul>
  </li>
  <li>Prevent branches dipping below the ground by clamping <code class="language-plaintext highlighter-rouge">end_y</code>.</li>
  <li>Append the branch to the <code class="language-plaintext highlighter-rouge">branches</code> list: <code class="language-plaintext highlighter-rouge">branches.append(((x, y), (end_x, end_y), width, depth))</code>.</li>
  <li>Compute Fibonacci-based scale <code class="language-plaintext highlighter-rouge">f_ratio</code> and <code class="language-plaintext highlighter-rouge">spread</code> to determine how much children diverge.</li>
  <li>Decide <code class="language-plaintext highlighter-rouge">sub_branches</code> ‚Äî number of children, varied with Fibonacci.</li>
  <li>Loop through children, derive <code class="language-plaintext highlighter-rouge">new_length</code>, <code class="language-plaintext highlighter-rouge">new_angle</code> (biased upwards), clamp angles, reduce width, then recursively call <code class="language-plaintext highlighter-rouge">grow()</code> with <code class="language-plaintext highlighter-rouge">depth - 1</code>.</li>
</ol>

<p>This recursion builds a flattened list <code class="language-plaintext highlighter-rouge">branches</code> which is later drawn progressively in the main loop.</p>

<h3 id="d-drawing-loop-and-draw_step">d) Drawing loop and <code class="language-plaintext highlighter-rouge">draw_step</code></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">branches</code> is precomputed once by <code class="language-plaintext highlighter-rouge">grow(...)</code> starting at the trunk base.</li>
  <li>Once user clicks, <code class="language-plaintext highlighter-rouge">draw_step</code> increases and the program draws <code class="language-plaintext highlighter-rouge">branches[:draw_step]</code> to animate growth.</li>
  <li>Color interpolation between brown and green depends on depth to simulate branch ‚Üí leaf transition.</li>
</ul>

<h2 id="6-why-and-when-to-parallelize">6. Why and when to parallelize</h2>

<p>The algorithm is CPU-heavy when <code class="language-plaintext highlighter-rouge">TREE_DEPTH</code> is high ‚Äî recursively creating many branches. Parallelizing the <strong>generation</strong> (not the drawing) can bring speed benefits on multicore machines.</p>

<p><strong>Important</strong>: Pygame drawing calls must happen in the main thread on many platforms. So you parallelize only the computationally heavy part: generating branch geometry (<code class="language-plaintext highlighter-rouge">branches</code> list). Drawing stays single-threaded.</p>

<p>When to parallelize:</p>
<ul>
  <li>If <code class="language-plaintext highlighter-rouge">TREE_DEPTH &gt;= 11</code> or you notice long pauses at startup while branches are computed.</li>
  <li>If you want quicker precomputation before animating the growth.</li>
</ul>

<h2 id="7-design-choices-for-multithreading">7. Design choices for multithreading</h2>

<p>Options:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">threading.Thread</code> and manual queue/lock management.</li>
  <li><code class="language-plaintext highlighter-rouge">concurrent.futures.ThreadPoolExecutor</code> ‚Äî simpler, higher-level.</li>
</ul>

<p>Constraints &amp; safety:</p>
<ul>
  <li>The shared <code class="language-plaintext highlighter-rouge">branches</code> list must be protected by a <code class="language-plaintext highlighter-rouge">threading.Lock</code> during append operations.</li>
  <li>Avoid creating thousands of concurrent threads. Use a bounded pool (<code class="language-plaintext highlighter-rouge">max_workers = min(32, os.cpu_count() or 4)</code>) to limit resource usage.</li>
  <li>Keep recursion depth per thread modest; better approach: have each submitted task compute an entire subtree (e.g., <code class="language-plaintext highlighter-rouge">grow()</code> from a given node down to a shallow depth) and append the resulting local list to the global list under a lock.</li>
</ul>

<p>Strategy implemented below:</p>
<ul>
  <li>The main <code class="language-plaintext highlighter-rouge">grow_parallel()</code> will push top-level child <code class="language-plaintext highlighter-rouge">grow</code> tasks into an executor.</li>
  <li>Each worker runs a variant <code class="language-plaintext highlighter-rouge">grow_worker()</code> that returns a local list of branches for that subtree.</li>
  <li>The main thread collects futures and merges results into the global <code class="language-plaintext highlighter-rouge">branches</code> once each future completes (safe merging under lock).</li>
</ul>

<p>This design reduces lock contention (threads only lock briefly to append a chunk) and keeps Pygame drawing safe.</p>

<h2 id="8-multithreaded-implementation--full-code">8. Multithreaded implementation ‚Äî full code</h2>

<p>Copy this file as <code class="language-plaintext highlighter-rouge">fibonacci_tree_parallel.py</code> and run it. This includes the parallel <code class="language-plaintext highlighter-rouge">generate_tree()</code> which uses <code class="language-plaintext highlighter-rouge">ThreadPoolExecutor</code> and a safe <code class="language-plaintext highlighter-rouge">branches</code> merge.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pygame</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">math</span><span class="p">,</span> <span class="n">random</span>
<span class="kn">from</span> <span class="nn">concurrent.futures</span> <span class="kn">import</span> <span class="n">ThreadPoolExecutor</span><span class="p">,</span> <span class="n">as_completed</span>
<span class="kn">import</span> <span class="nn">threading</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="c1"># INITIAL SETUP
</span><span class="n">pygame</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>
<span class="n">WIN_WIDTH</span><span class="p">,</span> <span class="n">WIN_HEIGHT</span> <span class="o">=</span> <span class="mi">1200</span><span class="p">,</span> <span class="mi">600</span>
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_mode</span><span class="p">((</span><span class="n">WIN_WIDTH</span><span class="p">,</span> <span class="n">WIN_HEIGHT</span><span class="p">))</span>
<span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s">"Fibonacci Tree Growth (Multithreaded)"</span><span class="p">)</span>

<span class="c1"># COLORS
</span><span class="n">SKY_COLOR</span>   <span class="o">=</span> <span class="p">(</span><span class="mi">135</span><span class="p">,</span> <span class="mi">206</span><span class="p">,</span> <span class="mi">235</span><span class="p">)</span>
<span class="n">BROWN_COLOR</span> <span class="o">=</span> <span class="p">(</span><span class="mi">139</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">19</span><span class="p">)</span>
<span class="n">GREEN_COLOR</span> <span class="o">=</span> <span class="p">(</span><span class="mi">34</span><span class="p">,</span> <span class="mi">139</span><span class="p">,</span> <span class="mi">34</span><span class="p">)</span>

<span class="c1"># TREE PARAMETERS
</span><span class="n">GROUND_HEIGHT</span>   <span class="o">=</span> <span class="mi">50</span>
<span class="n">TREE_DEPTH</span>      <span class="o">=</span> <span class="mi">10</span>
<span class="n">BRANCH_WIDTH</span>    <span class="o">=</span> <span class="mi">20</span>
<span class="n">SPREAD_BASE</span>     <span class="o">=</span> <span class="mi">25</span>
<span class="n">SPREAD_FACTOR</span>   <span class="o">=</span> <span class="mi">70</span>
<span class="n">LENGTH_DECAY</span>    <span class="o">=</span> <span class="mf">0.75</span>
<span class="n">LENGTH_VARIANCE</span> <span class="o">=</span> <span class="mf">0.1</span>
<span class="n">BRANCH_STEP</span>     <span class="o">=</span> <span class="mi">3</span>
<span class="n">FPS</span>             <span class="o">=</span> <span class="mi">60</span>

<span class="n">font</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">font</span><span class="p">.</span><span class="n">SysFont</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="n">bold</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># GLOBALS
</span><span class="n">branches</span> <span class="o">=</span> <span class="p">[]</span>             <span class="c1"># global branch list used by the renderer
</span><span class="n">branches_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="n">Lock</span><span class="p">()</span>  <span class="c1"># protect writes to `branches`
</span><span class="n">started</span> <span class="o">=</span> <span class="bp">False</span>

<span class="c1"># FIB
</span><span class="k">def</span> <span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
    <span class="k">return</span> <span class="n">a</span>

<span class="c1"># Worker-grow produces a local list and returns it (no shared writes).
</span><span class="k">def</span> <span class="nf">grow_worker</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">angle</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">tree_depth</span><span class="p">):</span>
    <span class="n">local</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">def</span> <span class="nf">_g</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">angle</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">width</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">depth</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">length</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="n">rad</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">radians</span><span class="p">(</span><span class="n">angle</span><span class="p">)</span>
        <span class="n">end_x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">math</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">)</span> <span class="o">*</span> <span class="n">length</span>
        <span class="n">end_y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">-</span> <span class="n">math</span><span class="p">.</span><span class="n">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">)</span> <span class="o">*</span> <span class="n">length</span>
        <span class="k">if</span> <span class="n">end_y</span> <span class="o">&gt;</span> <span class="n">WIN_HEIGHT</span> <span class="o">-</span> <span class="n">GROUND_HEIGHT</span><span class="p">:</span>
            <span class="n">end_y</span> <span class="o">=</span> <span class="n">WIN_HEIGHT</span> <span class="o">-</span> <span class="n">GROUND_HEIGHT</span>
        <span class="n">local</span><span class="p">.</span><span class="n">append</span><span class="p">(((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="p">(</span><span class="n">end_x</span><span class="p">,</span> <span class="n">end_y</span><span class="p">),</span> <span class="n">width</span><span class="p">,</span> <span class="n">depth</span><span class="p">))</span>

        <span class="n">f_ratio</span> <span class="o">=</span> <span class="n">fib</span><span class="p">(</span><span class="n">depth</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="n">fib</span><span class="p">(</span><span class="n">tree_depth</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">spread</span> <span class="o">=</span> <span class="n">SPREAD_BASE</span> <span class="o">+</span> <span class="n">SPREAD_FACTOR</span> <span class="o">*</span> <span class="n">f_ratio</span>
        <span class="n">sub_branches</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span> <span class="o">%</span> <span class="mi">3</span>

        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sub_branches</span><span class="p">):</span>
            <span class="n">new_length</span> <span class="o">=</span> <span class="n">length</span> <span class="o">*</span> <span class="p">(</span><span class="n">LENGTH_DECAY</span> <span class="o">+</span> <span class="n">LENGTH_VARIANCE</span> <span class="o">*</span> <span class="n">f_ratio</span><span class="p">)</span>
            <span class="n">bias</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">uniform</span><span class="p">(</span><span class="o">-</span><span class="n">spread</span><span class="p">,</span> <span class="n">spread</span><span class="p">)</span>
            <span class="n">new_angle</span> <span class="o">=</span> <span class="n">angle</span> <span class="o">+</span> <span class="n">bias</span>
            <span class="n">new_angle</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="o">-</span><span class="mi">70</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="mi">70</span><span class="p">,</span> <span class="n">new_angle</span><span class="p">))</span>
            <span class="n">new_width</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="mf">0.75</span><span class="p">))</span>
            <span class="n">_g</span><span class="p">(</span><span class="n">end_x</span><span class="p">,</span> <span class="n">end_y</span><span class="p">,</span> <span class="n">new_length</span><span class="p">,</span> <span class="n">new_angle</span><span class="p">,</span> <span class="n">depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">new_width</span><span class="p">)</span>

    <span class="n">_g</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">angle</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">local</span>

<span class="c1"># Multithreaded generation that submits the trunk's immediate children as tasks.
</span><span class="k">def</span> <span class="nf">generate_tree_parallel</span><span class="p">(</span><span class="n">root_x</span><span class="p">,</span> <span class="n">root_y</span><span class="p">,</span> <span class="n">initial_length</span><span class="p">,</span> <span class="n">root_depth</span><span class="p">,</span> <span class="n">root_width</span><span class="p">):</span>
    <span class="c1"># We'll compute the trunk synchronously, then spawn worker tasks for each top-level child subtree.
</span>    <span class="k">global</span> <span class="n">branches</span>
    <span class="n">branches</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="c1"># Add trunk (depth=root_depth)
</span>    <span class="n">rad</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">radians</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">trunk_end_x</span> <span class="o">=</span> <span class="n">root_x</span> <span class="o">+</span> <span class="n">math</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">)</span> <span class="o">*</span> <span class="n">initial_length</span>
    <span class="n">trunk_end_y</span> <span class="o">=</span> <span class="n">root_y</span> <span class="o">-</span> <span class="n">math</span><span class="p">.</span><span class="n">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">)</span> <span class="o">*</span> <span class="n">initial_length</span>
    <span class="k">if</span> <span class="n">trunk_end_y</span> <span class="o">&gt;</span> <span class="n">WIN_HEIGHT</span> <span class="o">-</span> <span class="n">GROUND_HEIGHT</span><span class="p">:</span>
        <span class="n">trunk_end_y</span> <span class="o">=</span> <span class="n">WIN_HEIGHT</span> <span class="o">-</span> <span class="n">GROUND_HEIGHT</span>
    <span class="n">branches</span><span class="p">.</span><span class="n">append</span><span class="p">(((</span><span class="n">root_x</span><span class="p">,</span> <span class="n">root_y</span><span class="p">),</span> <span class="p">(</span><span class="n">trunk_end_x</span><span class="p">,</span> <span class="n">trunk_end_y</span><span class="p">),</span> <span class="n">root_width</span><span class="p">,</span> <span class="n">root_depth</span><span class="p">))</span>

    <span class="c1"># Prepare tasks for child subtrees emerging from trunk_end
</span>    <span class="n">f_ratio</span> <span class="o">=</span> <span class="n">fib</span><span class="p">(</span><span class="n">root_depth</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="n">fib</span><span class="p">(</span><span class="n">TREE_DEPTH</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">spread</span> <span class="o">=</span> <span class="n">SPREAD_BASE</span> <span class="o">+</span> <span class="n">SPREAD_FACTOR</span> <span class="o">*</span> <span class="n">f_ratio</span>
    <span class="n">sub_branches</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">fib</span><span class="p">(</span><span class="n">root_depth</span><span class="p">)</span> <span class="o">%</span> <span class="mi">3</span>

    <span class="c1"># Decide worker pool size
</span>    <span class="n">max_workers</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">cpu_count</span><span class="p">()</span> <span class="ow">or</span> <span class="mi">4</span><span class="p">))</span>
    <span class="k">with</span> <span class="n">ThreadPoolExecutor</span><span class="p">(</span><span class="n">max_workers</span><span class="o">=</span><span class="n">max_workers</span><span class="p">)</span> <span class="k">as</span> <span class="n">executor</span><span class="p">:</span>
        <span class="n">futures</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">sub_branches</span><span class="p">):</span>
            <span class="n">new_length</span> <span class="o">=</span> <span class="n">initial_length</span> <span class="o">*</span> <span class="p">(</span><span class="n">LENGTH_DECAY</span> <span class="o">+</span> <span class="n">LENGTH_VARIANCE</span> <span class="o">*</span> <span class="n">f_ratio</span><span class="p">)</span>
            <span class="n">bias</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">uniform</span><span class="p">(</span><span class="o">-</span><span class="n">spread</span><span class="p">,</span> <span class="n">spread</span><span class="p">)</span>
            <span class="n">new_angle</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="o">-</span><span class="mi">70</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="mi">70</span><span class="p">,</span> <span class="n">bias</span><span class="p">))</span>
            <span class="n">new_width</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">root_width</span> <span class="o">*</span> <span class="mf">0.75</span><span class="p">))</span>
            <span class="c1"># Submit each subtree
</span>            <span class="n">futures</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">executor</span><span class="p">.</span><span class="n">submit</span><span class="p">(</span><span class="n">grow_worker</span><span class="p">,</span> <span class="n">trunk_end_x</span><span class="p">,</span> <span class="n">trunk_end_y</span><span class="p">,</span> <span class="n">new_length</span><span class="p">,</span> <span class="n">new_angle</span><span class="p">,</span> <span class="n">root_depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">new_width</span><span class="p">,</span> <span class="n">TREE_DEPTH</span><span class="p">))</span>

        <span class="c1"># As futures complete, merge their local lists into the global branches list with minimal locking.
</span>        <span class="k">for</span> <span class="n">fut</span> <span class="ow">in</span> <span class="n">as_completed</span><span class="p">(</span><span class="n">futures</span><span class="p">):</span>
            <span class="n">local_branches</span> <span class="o">=</span> <span class="n">fut</span><span class="p">.</span><span class="n">result</span><span class="p">()</span>
            <span class="k">with</span> <span class="n">branches_lock</span><span class="p">:</span>
                <span class="n">branches</span><span class="p">.</span><span class="n">extend</span><span class="p">(</span><span class="n">local_branches</span><span class="p">)</span>

<span class="c1"># INITIAL TREE CREATION (parallel)
</span><span class="n">INITIAL_LENGTH</span> <span class="o">=</span> <span class="p">(</span><span class="n">WIN_HEIGHT</span> <span class="o">-</span> <span class="mi">120</span><span class="p">)</span> <span class="o">//</span> <span class="p">(</span><span class="n">TREE_DEPTH</span> <span class="o">*</span> <span class="mf">0.8</span><span class="p">)</span>
<span class="c1"># generate using parallel generator
</span><span class="n">generate_tree_parallel</span><span class="p">(</span><span class="n">WIN_WIDTH</span> <span class="o">//</span> <span class="mi">2</span><span class="p">,</span> <span class="n">WIN_HEIGHT</span> <span class="o">-</span> <span class="n">GROUND_HEIGHT</span><span class="p">,</span> <span class="n">INITIAL_LENGTH</span> <span class="o">*</span> <span class="mi">2</span><span class="p">,</span> <span class="n">TREE_DEPTH</span><span class="p">,</span> <span class="n">BRANCH_WIDTH</span><span class="p">)</span>

<span class="c1"># CLOCK
</span><span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">time</span><span class="p">.</span><span class="n">Clock</span><span class="p">()</span>

<span class="c1"># MAIN LOOP
</span><span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">time</span><span class="p">.</span><span class="n">Clock</span><span class="p">()</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="p">.</span><span class="n">event</span><span class="p">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="n">pygame</span><span class="p">.</span><span class="n">quit</span><span class="p">()</span>
            <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">MOUSEBUTTONDOWN</span><span class="p">:</span>
            <span class="n">started</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="n">screen</span><span class="p">.</span><span class="n">fill</span><span class="p">(</span><span class="n">SKY_COLOR</span><span class="p">)</span>
    <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">GREEN_COLOR</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">WIN_HEIGHT</span> <span class="o">-</span> <span class="n">GROUND_HEIGHT</span><span class="p">,</span> <span class="n">WIN_WIDTH</span><span class="p">,</span> <span class="n">GROUND_HEIGHT</span><span class="p">))</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">started</span><span class="p">:</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">font</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="s">"CLICK TO START"</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="n">GREEN_COLOR</span><span class="p">)</span>
        <span class="n">screen</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="p">(</span><span class="n">WIN_WIDTH</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">-</span> <span class="n">msg</span><span class="p">.</span><span class="n">get_width</span><span class="p">()</span> <span class="o">//</span> <span class="mi">2</span><span class="p">,</span> <span class="n">WIN_HEIGHT</span> <span class="o">//</span> <span class="mi">2</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># animate growth
</span>        <span class="n">draw_step</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">branches</span><span class="p">),</span> <span class="p">(</span><span class="n">pygame</span><span class="p">.</span><span class="n">time</span><span class="p">.</span><span class="n">get_ticks</span><span class="p">()</span> <span class="o">//</span> <span class="mi">10</span><span class="p">))</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">depth</span><span class="p">)</span> <span class="ow">in</span> <span class="n">branches</span><span class="p">[:</span><span class="n">draw_step</span><span class="p">]:</span>
            <span class="k">if</span> <span class="n">depth</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">:</span>
                <span class="n">color</span> <span class="o">=</span> <span class="n">BROWN_COLOR</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">color</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span>
                    <span class="nb">int</span><span class="p">(</span><span class="n">BROWN_COLOR</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="p">((</span><span class="n">depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="n">GREEN_COLOR</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="n">depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">4</span><span class="p">))</span>
                    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
                <span class="p">)</span>
            <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">width</span><span class="p">)</span>

        <span class="n">text</span> <span class="o">=</span> <span class="n">font</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="sa">f</span><span class="s">"BRANCH COUNT: </span><span class="si">{</span><span class="nb">min</span><span class="p">(</span><span class="n">draw_step</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">branches</span><span class="p">))</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="n">GREEN_COLOR</span><span class="p">)</span>
        <span class="n">screen</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="p">(</span><span class="n">WIN_WIDTH</span> <span class="o">-</span> <span class="n">text</span><span class="p">.</span><span class="n">get_width</span><span class="p">()</span> <span class="o">-</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>

    <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">flip</span><span class="p">()</span>
    <span class="n">clock</span><span class="p">.</span><span class="n">tick</span><span class="p">(</span><span class="n">FPS</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Notes about the code above</strong>:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">grow_worker()</code> performs the recursion only <em>locally</em> and returns a <code class="language-plaintext highlighter-rouge">local</code> list of branches rather than appending to a global list while computing. This avoids heavy lock contention.</li>
  <li><code class="language-plaintext highlighter-rouge">generate_tree_parallel()</code> handles trunk creation synchronously, then schedules multiple subtree computations via <code class="language-plaintext highlighter-rouge">ThreadPoolExecutor</code>. When a future completes, its result is merged into <code class="language-plaintext highlighter-rouge">branches</code> under <code class="language-plaintext highlighter-rouge">branches_lock</code>.</li>
  <li>The renderer still draws from <code class="language-plaintext highlighter-rouge">branches</code> on the main thread.</li>
</ul>

<h2 id="9-how-to-run-and-test">9. How to run and test</h2>

<ol>
  <li>Save the file as <code class="language-plaintext highlighter-rouge">fibonacci_tree_parallel.py</code>.</li>
  <li>Install pygame if necessary: <code class="language-plaintext highlighter-rouge">pip install pygame</code>.</li>
  <li>Run: <code class="language-plaintext highlighter-rouge">python fibonacci_tree_parallel.py</code>.</li>
  <li>Click the window to start the growth animation.</li>
</ol>

<p><strong>Testing tips</strong>:</p>
<ul>
  <li>Try small/large <code class="language-plaintext highlighter-rouge">TREE_DEPTH</code> values to observe performance changes.</li>
  <li>Toggle <code class="language-plaintext highlighter-rouge">max_workers</code> or the strategy to see CPU/time tradeoffs.</li>
</ul>

<h2 id="10-performance-considerations--debugging-tips">10. Performance considerations &amp; debugging tips</h2>

<ul>
  <li>
    <p>Python threads are limited by the Global Interpreter Lock (GIL) for pure-Python CPU-bound tasks. However, splitting heavy recursion into multiple threads often helps if some operations release the GIL (not the case here) OR if overhead (waiting for random numbers, I/O) exists. Still, for pure CPU-bound tasks, <code class="language-plaintext highlighter-rouge">multiprocessing</code> may give better scaling. The thread approach helps eliminate GUI freeze because branch generation tasks are off the main thread.</p>
  </li>
  <li>
    <p>If you want true parallel CPU utilization for heavy depth, consider <code class="language-plaintext highlighter-rouge">multiprocessing</code> instead. It requires serializing results between processes (e.g., <code class="language-plaintext highlighter-rouge">multiprocessing.Pool</code>), but it avoids the GIL.</p>
  </li>
  <li>
    <p>Keep <code class="language-plaintext highlighter-rouge">branches</code> merging minimal and batched. Appending many single branches under a lock causes contention. Returning a local list and merging it once avoids this.</p>
  </li>
  <li>
    <p>On Windows, <code class="language-plaintext highlighter-rouge">pygame</code> must run in the main thread. Don‚Äôt attempt to call Pygame display or drawing from worker threads.</p>
  </li>
</ul>

<h2 id="11-faq-and-closing-notes">11. FAQ and closing notes</h2>

<p><strong>Q: Why not call <code class="language-plaintext highlighter-rouge">grow()</code> directly in multiple threads (no <code class="language-plaintext highlighter-rouge">local</code> lists)?</strong>
A: That creates lock contention (every branch append needs a lock) and increases the chance of subtle bugs. Using local results and merging is safer and faster.</p>

<p><strong>Q: Can I parallelize drawing?</strong>
A: No ‚Äî drawing must stay in the main thread for portability and correctness.</p>

<p><strong>Q: When should I use <code class="language-plaintext highlighter-rouge">multiprocessing</code> instead?</strong>
A: Use it when <code class="language-plaintext highlighter-rouge">TREE_DEPTH</code> is large (e.g., 12+) and CPU usage is the bottleneck. It has higher overhead but avoids the GIL.</p>

<h3 id="final-thoughts">Final thoughts</h3>

<p>This tutorial shows how to understand the original recursive fractal generator and how to safely run expensive geometry generation in parallel without touching the GUI thread. Use the provided code as a starting point ‚Äî tweak parameters, depths, and the pool strategy to match your CPU and artistic goal.</p>

<p>Happy coding and happy tree-growing!</p>]]></content><author><name>PyShine Team</name></author><category term="fibonacci" /><category term="draw tree" /><category term="random tree" /><summary type="html"><![CDATA[Fibonacci Tree in python]]></summary></entry><entry><title type="html">How to make a zombie shooter game</title><link href="https://www.pyshine.com/How-to-make-Zombie-Shooter-game/" rel="alternate" type="text/html" title="How to make a zombie shooter game" /><published>2025-02-07T00:00:00+00:00</published><updated>2025-02-07T00:00:00+00:00</updated><id>https://www.pyshine.com/How-to-make-Zombie-Shooter-game</id><content type="html" xml:base="https://www.pyshine.com/How-to-make-Zombie-Shooter-game/"><![CDATA[<p>Welcome to this tutorial where we‚Äôll be building a simple ‚ÄúZombie Shooter‚Äù game using Pygame! This game involves a player controlling a shooter at the bottom of the screen, shooting bullets upwards to eliminate incoming zombies. The goal is to survive as long as possible while accumulating points by shooting zombies. We‚Äôll break down the code into several sections to make it easy to understand:</p>

<p>Game (Initialization): We start by initializing Pygame and setting up the game screen. The screen size is defined, along with the title and color scheme.</p>

<p>Player Setup: We load and resize the player‚Äôs image and set the initial position and movement speed. The player can move left and right using the arrow keys.</p>

<p>Bullet Mechanism: Bullets are fired when the player presses the spacebar. We track the position and movement of the bullets, removing them when they go off-screen.</p>

<p>Zombie Setup: Zombies are spawned at random positions at the top of the screen and move downwards. If a zombie reaches the bottom, the game ends.</p>

<p>Collision Detection: The game checks for collisions between bullets and zombies. When a bullet hits a zombie, both are removed from the screen, and the player‚Äôs score increases.</p>

<p>Score and Game Over: The score is tracked and displayed on the screen. If the player‚Äôs score surpasses the top score, it is saved to a file. If the game ends, the player can restart by pressing ‚ÄúR‚Äù.</p>

<h1 id="key-sections-of-the-code">Key Sections of the Code:</h1>

<p>Player Setup: This is where we load the player‚Äôs image and place it at the bottom center of the screen. The player moves left and right using the arrow keys, and we track the player‚Äôs position using player_x and player_y.</p>

<p>Bullet Mechanics: When the player presses space, bullets are created at the player‚Äôs current position. Each bullet moves upwards at a constant speed. We remove bullets when they go off-screen.</p>

<p>Zombie Mechanics: Zombies spawn at random positions at the top of the screen and slowly move downwards. If a zombie reaches the bottom, the game ends, and the player loses.</p>

<p>Collision and Scoring: Whenever a bullet hits a zombie, the zombie and bullet are removed from the game, and the score increases by 1. We also keep track of the top score in a file and display it on the screen.</p>

<p>Game Over and Restart: If the game is over, the player can press ‚ÄúR‚Äù to restart the game, resetting everything to its initial state.</p>

<p>For more details:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/c_aLPUfAaxo?si=WnFz4Ej35mGKDN3u" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen=""></iframe>

<p>Source code :</p>
<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pygame</span>
<span class="kn">import</span> <span class="nn">random</span>

<span class="c1"># Initialize pygame
</span><span class="n">pygame</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>

<span class="c1"># Screen dimensions
</span><span class="n">WIDTH</span><span class="p">,</span> <span class="n">HEIGHT</span> <span class="o">=</span> <span class="mi">800</span><span class="p">,</span> <span class="mi">600</span>
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_mode</span><span class="p">((</span><span class="n">WIDTH</span><span class="p">,</span> <span class="n">HEIGHT</span><span class="p">))</span>
<span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s">"Zombie Shooter"</span><span class="p">)</span>

<span class="c1"># Colors
</span><span class="n">WHITE</span> <span class="o">=</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span>
<span class="n">RED</span> <span class="o">=</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">GREEN</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">BLACK</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

<span class="c1"># Load assets
</span><span class="n">player_img</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">"static/icon.png"</span><span class="p">)</span>
<span class="n">zombie_img</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">image</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">"static/zombie.png"</span><span class="p">)</span>

<span class="c1"># Resize images
</span><span class="n">player_size</span> <span class="o">=</span> <span class="mi">50</span>
<span class="n">player_img</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">scale</span><span class="p">(</span><span class="n">player_img</span><span class="p">,</span> <span class="p">(</span><span class="n">player_size</span><span class="p">,</span> <span class="n">player_size</span><span class="p">))</span>
<span class="n">zombie_img</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">scale</span><span class="p">(</span><span class="n">zombie_img</span><span class="p">,</span> <span class="p">(</span><span class="n">player_size</span><span class="p">,</span> <span class="n">player_size</span><span class="p">))</span>

<span class="c1"># Player setup
</span><span class="n">player_x</span> <span class="o">=</span> <span class="n">WIDTH</span> <span class="o">//</span> <span class="mi">2</span>
<span class="n">player_y</span> <span class="o">=</span> <span class="n">HEIGHT</span> <span class="o">-</span> <span class="mi">70</span>
<span class="n">player_speed</span> <span class="o">=</span> <span class="mi">5</span>

<span class="c1"># Bullet setup
</span><span class="n">bullets</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">bullet_speed</span> <span class="o">=</span> <span class="mi">7</span>

<span class="c1"># Zombie setup
</span><span class="n">zombies</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">zombie_speed</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">spawn_rate</span> <span class="o">=</span> <span class="mi">25</span>  <span class="c1"># Lower is faster
</span>
<span class="c1"># Font setup
</span><span class="n">font</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">font</span><span class="p">.</span><span class="n">Font</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>

<span class="c1"># Load top score from file
</span><span class="k">def</span> <span class="nf">load_top_score</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"top_score.txt"</span><span class="p">,</span> <span class="s">"r"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
            <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">file</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">strip</span><span class="p">())</span>
    <span class="k">except</span> <span class="p">(</span><span class="nb">FileNotFoundError</span><span class="p">,</span> <span class="nb">ValueError</span><span class="p">):</span>
        <span class="k">return</span> <span class="mi">0</span>

<span class="k">def</span> <span class="nf">save_top_score</span><span class="p">(</span><span class="n">score</span><span class="p">):</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"top_score.txt"</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
        <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">score</span><span class="p">))</span>

<span class="n">top_score</span> <span class="o">=</span> <span class="n">load_top_score</span><span class="p">()</span>

<span class="c1"># Game loop
</span><span class="n">running</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">game_over</span> <span class="o">=</span> <span class="bp">False</span>
<span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">time</span><span class="p">.</span><span class="n">Clock</span><span class="p">()</span>
<span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">def</span> <span class="nf">reset_game</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">player_x</span><span class="p">,</span> <span class="n">player_y</span><span class="p">,</span> <span class="n">bullets</span><span class="p">,</span> <span class="n">zombies</span><span class="p">,</span> <span class="n">score</span><span class="p">,</span> <span class="n">game_over</span>
    <span class="n">player_x</span> <span class="o">=</span> <span class="n">WIDTH</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">player_y</span> <span class="o">=</span> <span class="n">HEIGHT</span> <span class="o">-</span> <span class="mi">70</span>
    <span class="n">bullets</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">zombies</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">game_over</span> <span class="o">=</span> <span class="bp">False</span>

<span class="k">while</span> <span class="n">running</span><span class="p">:</span>
    <span class="n">screen</span><span class="p">.</span><span class="n">fill</span><span class="p">(</span><span class="n">BLACK</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="ow">not</span> <span class="n">game_over</span><span class="p">:</span>
        <span class="c1"># Event handling
</span>        <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="p">.</span><span class="n">event</span><span class="p">.</span><span class="n">get</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">QUIT</span><span class="p">:</span>
                <span class="n">running</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">KEYDOWN</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">K_SPACE</span><span class="p">:</span>
                    <span class="n">bullets</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">player_x</span> <span class="o">+</span> <span class="n">player_size</span> <span class="o">//</span> <span class="mi">2</span><span class="p">,</span> <span class="n">player_y</span><span class="p">])</span>
        
        <span class="c1"># Player movement
</span>        <span class="n">keys</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">key</span><span class="p">.</span><span class="n">get_pressed</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">keys</span><span class="p">[</span><span class="n">pygame</span><span class="p">.</span><span class="n">K_LEFT</span><span class="p">]</span> <span class="ow">and</span> <span class="n">player_x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">player_x</span> <span class="o">-=</span> <span class="n">player_speed</span>
        <span class="k">if</span> <span class="n">keys</span><span class="p">[</span><span class="n">pygame</span><span class="p">.</span><span class="n">K_RIGHT</span><span class="p">]</span> <span class="ow">and</span> <span class="n">player_x</span> <span class="o">&lt;</span> <span class="n">WIDTH</span> <span class="o">-</span> <span class="n">player_size</span><span class="p">:</span>
            <span class="n">player_x</span> <span class="o">+=</span> <span class="n">player_speed</span>
        
        <span class="c1"># Bullet movement
</span>        <span class="k">for</span> <span class="n">bullet</span> <span class="ow">in</span> <span class="n">bullets</span><span class="p">[:]:</span>
            <span class="n">bullet</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-=</span> <span class="n">bullet_speed</span>
            <span class="k">if</span> <span class="n">bullet</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">bullets</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">bullet</span><span class="p">)</span>
        
        <span class="c1"># Spawn zombies
</span>        <span class="k">if</span> <span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">spawn_rate</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">zombies</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">WIDTH</span> <span class="o">-</span> <span class="n">player_size</span><span class="p">),</span> <span class="mi">0</span><span class="p">])</span>
        
        <span class="c1"># Zombie movement
</span>        <span class="k">for</span> <span class="n">zombie</span> <span class="ow">in</span> <span class="n">zombies</span><span class="p">[:]:</span>
            <span class="n">zombie</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="n">zombie_speed</span>
            <span class="k">if</span> <span class="n">zombie</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">HEIGHT</span><span class="p">:</span>
                <span class="n">game_over</span> <span class="o">=</span> <span class="bp">True</span>  <span class="c1"># Game over if a zombie reaches bottom
</span>        
        <span class="c1"># Collision detection
</span>        <span class="k">for</span> <span class="n">bullet</span> <span class="ow">in</span> <span class="n">bullets</span><span class="p">[:]:</span>
            <span class="k">for</span> <span class="n">zombie</span> <span class="ow">in</span> <span class="n">zombies</span><span class="p">[:]:</span>
                <span class="k">if</span> <span class="n">zombie</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">bullet</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">zombie</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">player_size</span> <span class="ow">and</span> \
                   <span class="n">zombie</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">bullet</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">zombie</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">player_size</span><span class="p">:</span>
                    <span class="n">zombies</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">zombie</span><span class="p">)</span>
                    <span class="n">bullets</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">bullet</span><span class="p">)</span>
                    <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="c1"># Draw elements
</span>        <span class="n">screen</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">player_img</span><span class="p">,</span> <span class="p">(</span><span class="n">player_x</span><span class="p">,</span> <span class="n">player_y</span><span class="p">))</span>
        <span class="k">for</span> <span class="n">bullet</span> <span class="ow">in</span> <span class="n">bullets</span><span class="p">:</span>
            <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">RED</span><span class="p">,</span> <span class="p">(</span><span class="n">bullet</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">bullet</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
        <span class="k">for</span> <span class="n">zombie</span> <span class="ow">in</span> <span class="n">zombies</span><span class="p">:</span>
            <span class="n">screen</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">zombie_img</span><span class="p">,</span> <span class="p">(</span><span class="n">zombie</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">zombie</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
        
        <span class="c1"># Update and display score
</span>        <span class="k">if</span> <span class="n">score</span> <span class="o">&gt;</span> <span class="n">top_score</span><span class="p">:</span>
            <span class="n">top_score</span> <span class="o">=</span> <span class="n">score</span>
            <span class="n">save_top_score</span><span class="p">(</span><span class="n">top_score</span><span class="p">)</span>
        
        <span class="n">top_score_text</span> <span class="o">=</span> <span class="n">font</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="sa">f</span><span class="s">"Top Score: </span><span class="si">{</span><span class="n">top_score</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="n">RED</span><span class="p">)</span>
        <span class="n">screen</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">top_score_text</span><span class="p">,</span> <span class="p">(</span><span class="n">WIDTH</span> <span class="o">-</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
        
        <span class="n">score_text</span> <span class="o">=</span> <span class="n">font</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="sa">f</span><span class="s">"Score: </span><span class="si">{</span><span class="n">score</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">)</span>
        <span class="n">screen</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">score_text</span><span class="p">,</span> <span class="p">(</span><span class="n">WIDTH</span> <span class="o">-</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">40</span><span class="p">))</span>
    
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Game over screen
</span>        <span class="n">game_over_text</span> <span class="o">=</span> <span class="n">font</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="s">"Game Over! Your score: "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">score</span><span class="p">),</span> <span class="bp">True</span><span class="p">,</span> <span class="n">WHITE</span><span class="p">)</span>
        <span class="n">screen</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">game_over_text</span><span class="p">,</span> <span class="p">(</span><span class="n">WIDTH</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">150</span><span class="p">,</span> <span class="n">HEIGHT</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">50</span><span class="p">))</span>
        
        <span class="n">restart_text</span> <span class="o">=</span> <span class="n">font</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="s">"Press R to Restart"</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="n">WHITE</span><span class="p">)</span>
        <span class="n">screen</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">restart_text</span><span class="p">,</span> <span class="p">(</span><span class="n">WIDTH</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">100</span><span class="p">,</span> <span class="n">HEIGHT</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">10</span><span class="p">))</span>
        
        <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="p">.</span><span class="n">event</span><span class="p">.</span><span class="n">get</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">QUIT</span><span class="p">:</span>
                <span class="n">running</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">KEYDOWN</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="n">key</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">K_r</span><span class="p">:</span>
                    <span class="n">reset_game</span><span class="p">()</span>
    
    <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">flip</span><span class="p">()</span>
    <span class="n">clock</span><span class="p">.</span><span class="n">tick</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>

<span class="n">pygame</span><span class="p">.</span><span class="n">quit</span><span class="p">()</span>
</code></pre></div></div>]]></content><author><name>PyShine Team</name></author><category term="zombie shooter game" /><category term="pygame tutorial" /><category term="pygame basic tutorial" /><summary type="html"><![CDATA[Display remote Matplotlib window in localhost]]></summary></entry><entry><title type="html">Displaying Remote Application Windows Locally Using SSH and X11 Forwarding</title><link href="https://www.pyshine.com/Displaying-Remote-Application/" rel="alternate" type="text/html" title="Displaying Remote Application Windows Locally Using SSH and X11 Forwarding" /><published>2024-06-08T00:00:00+00:00</published><updated>2024-06-08T00:00:00+00:00</updated><id>https://www.pyshine.com/Displaying-Remote-Application</id><content type="html" xml:base="https://www.pyshine.com/Displaying-Remote-Application/"><![CDATA[<p>In this tutorial, we‚Äôll walk you through the steps to display graphical applications running on a remote server on your local machine. This is especially useful for visualizing plots or running GUI-based applications from a remote server.</p>

<h1 id="prerequisites">Prerequisites</h1>
<h2 id="remote-server">Remote Server:</h2>
<p>Ubuntu 22.04 or similar.</p>
<h3 id="local-machine">Local Machine:</h3>
<p>macOS with XQuartz installed.</p>
<h3 id="ssh-access">SSH Access:</h3>
<p>Ensure you can SSH into the remote server.</p>

<h2 id="step-1-install-xquartz-on-macos">Step 1: Install XQuartz on macOS</h2>
<p>XQuartz is an open-source version of the X.Org X server that runs on macOS.</p>

<h3 id="download-xquartz">Download XQuartz:</h3>

<p>Go to the XQuartz website and download the latest version.</p>
<h3 id="install-xquartz">Install XQuartz:</h3>

<p>Open the downloaded .dmg file and follow the installation instructions.</p>
<h3 id="start-xquartz">Start XQuartz:</h3>

<p>Open XQuartz from the Applications folder.</p>

<h1 id="step-2-configure-ssh-for-x11-forwarding">Step 2: Configure SSH for X11 Forwarding</h1>
<h2 id="on-the-remote-server">On the Remote Server</h2>
<p>Edit the SSH Configuration File:</p>

<p>Open the SSH configuration file with a text editor, such as nano:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo nano /etc/ssh/sshd_config
</code></pre></div></div>

<h2 id="uncomment-and-set-values">Uncomment and Set Values:</h2>

<p>Ensure the following lines are set (uncomment if necessary):</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>X11Forwarding yes
X11UseLocalhost yes

</code></pre></div></div>

<h2 id="save-and-exit">Save and Exit:</h2>

<p>Save the changes and exit the text editor (Ctrl+O to save in nano, then Ctrl+X to exit).</p>
<h2 id="restart-ssh-service">Restart SSH Service:</h2>

<p>Restart the SSH service to apply the changes:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo systemctl restart ssh

</code></pre></div></div>

<h1 id="step-3-ssh-with-x11-forwarding-from-macos">Step 3: SSH with X11 Forwarding from macOS</h1>
<p>Set DISPLAY Variable on macOS:</p>

<p>In a terminal on your Mac, set the DISPLAY variable:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export DISPLAY=:0

</code></pre></div></div>

<h2 id="ssh-into-the-remote-server">SSH into the Remote Server:</h2>

<p>Use the -Y flag to enable trusted X11 forwarding:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh -Y user@remote_server_ip

</code></pre></div></div>

<p>Replace user with your username on the remote server and remote_server_ip with the IP address of your remote server.</p>

<h1 id="step-4-test-x11-forwarding">Step 4: Test X11 Forwarding</h1>
<h2 id="run-a-gui-application">Run a GUI Application:</h2>
<p>After logging into the remote server, try running an X11 application, such as <code class="language-plaintext highlighter-rouge">xclock</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xclock
</code></pre></div></div>

<p>If everything is configured correctly, the xclock window should appear on your local machine.</p>

<h1 id="troubleshooting">Troubleshooting</h1>
<p>If you encounter the ‚ÄúCan‚Äôt open display‚Äù error or other issues, try the following steps:</p>

<h2 id="ensure-xquartz-is-allowing-connections">Ensure XQuartz is Allowing Connections:</h2>

<p>In XQuartz, go to Preferences &gt; Security and ensure ‚ÄúAllow connections from network clients‚Äù is checked.
Check DISPLAY Variable on the Remote Server:</p>

<p>After SSHing into the remote server, ensure the DISPLAY variable is set correctly:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo $DISPLAY
</code></pre></div></div>
<p>The output should be something like localhost:10.0. or something like that with a port number .</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Restart XQuartz:
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import matplotlib.pyplot as plt
plt.plot([1,2,3])
plt.show()
</code></pre></div></div>

<p>Sometimes, simply restarting XQuartz can resolve connection issues.</p>

<h1 id="conclusion">Conclusion</h1>
<p>By following these steps, you can run graphical applications on a remote server and display them on your local machine using X11 forwarding. This setup is particularly useful for remote development, running graphical applications, and visualizing data plots from a remote server. Thanks</p>]]></content><author><name>PyShine Team</name></author><category term="X11" /><category term="SSH" /><category term="XQuartz" /><category term="remote applications" /><category term="GUI" /><category term="Matplotlib" /><category term="Ubuntu" /><category term="macOS" /><summary type="html"><![CDATA[Display remote Matplotlib window in localhost]]></summary></entry><entry><title type="html">Let‚Äôs build a copter game</title><link href="https://www.pyshine.com/Make-a-Copter-game/" rel="alternate" type="text/html" title="Let‚Äôs build a copter game" /><published>2024-05-31T00:00:00+00:00</published><updated>2024-05-31T00:00:00+00:00</updated><id>https://www.pyshine.com/Make-a-Copter-game</id><content type="html" xml:base="https://www.pyshine.com/Make-a-Copter-game/"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Games have always been a fascinating way to blend creativity with programming skills. In this tutorial, we will build a simple yet engaging helicopter game using Python‚Äôs Pygame library. This game will help you understand the basics of game development, including handling user inputs, rendering graphics, and managing game states.</p>

<h1 id="what-is-pygame">What is Pygame?</h1>
<p>Pygame is a set of Python modules designed for writing video games. It provides functionalities for creating graphics, handling input devices, and managing game events. Pygame is ideal for beginners who want to get started with game development due to its simplicity and ease of use.</p>

<h1 id="game-concept">Game Concept</h1>
<p>In our helicopter game, the player controls a helicopter that navigates through a series of obstacles. The objective is to avoid hitting the obstacles or the screen boundaries while trying to achieve the highest score possible. The helicopter can be moved up and down using the arrow keys.</p>

<h1 id="getting-started">Getting Started</h1>
<p>To start with this tutorial, you need to have Python and Pygame installed on your system. You can install Pygame using pip:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install pygame
</code></pre></div></div>

<h1 id="step-by-step-guide-to-building-the-game">Step-by-Step Guide to Building the Game</h1>
<h2 id="setting-up-pygame">Setting Up Pygame</h2>
<p>First, we need to initialize Pygame and set up the display window where our game will run.</p>

<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pygame</span>
<span class="kn">import</span> <span class="nn">random</span>

<span class="c1"># Initialize Pygame
</span><span class="n">pygame</span><span class="p">.</span><span class="n">init</span><span class="p">()</span>

<span class="c1"># Set up the display
</span><span class="n">WIDTH</span><span class="p">,</span> <span class="n">HEIGHT</span> <span class="o">=</span> <span class="mi">800</span><span class="p">,</span> <span class="mi">600</span>
<span class="n">screen</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_mode</span><span class="p">((</span><span class="n">WIDTH</span><span class="p">,</span> <span class="n">HEIGHT</span><span class="p">))</span>
<span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">set_caption</span><span class="p">(</span><span class="s">"Copter Game"</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="defining-constants-and-colors">Defining Constants and Colors</h2>
<p>Next, we define the constants and colors used in the game. These include screen dimensions, game physics constants, obstacle properties, and colors for different game elements.</p>
<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Constants
</span><span class="n">FPS</span> <span class="o">=</span> <span class="mi">60</span>
<span class="n">GRAVITY</span> <span class="o">=</span> <span class="mf">0.5</span>
<span class="n">FLAP_STRENGTH</span> <span class="o">=</span> <span class="o">-</span><span class="mi">10</span>
<span class="n">OBSTACLE_WIDTH</span> <span class="o">=</span> <span class="mi">70</span>
<span class="n">OBSTACLE_GAP</span> <span class="o">=</span> <span class="mi">200</span>
<span class="n">OBSTACLE_SPEED</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">UPWARD_SPEED</span> <span class="o">=</span> <span class="o">-</span><span class="mi">5</span>
<span class="n">DOWNWARD_SPEED</span> <span class="o">=</span> <span class="mi">5</span>

<span class="c1"># Colors
</span><span class="n">WHITE</span> <span class="o">=</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span>
<span class="n">BLACK</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">GREEN</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">RED</span> <span class="o">=</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">BLUE</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span>
<span class="n">SKY_BLUE</span> <span class="o">=</span> <span class="p">(</span><span class="mi">135</span><span class="p">,</span> <span class="mi">206</span><span class="p">,</span> <span class="mi">235</span><span class="p">)</span>
<span class="n">GREY</span> <span class="o">=</span> <span class="p">(</span><span class="mi">169</span><span class="p">,</span> <span class="mi">169</span><span class="p">,</span> <span class="mi">169</span><span class="p">)</span>
</code></pre></div></div>
<h2 id="initializing-game-variables">Initializing Game Variables</h2>
<p>We then initialize the game variables such as the helicopter‚Äôs position, velocity, obstacles, score, and game state.</p>

<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Game variables
</span><span class="n">helicopter_rect</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">Rect</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="n">HEIGHT</span> <span class="o">//</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">28</span><span class="p">)</span>  <span class="c1"># Reduced size to 70%
</span><span class="n">velocity</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">obstacles</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">game_over</span> <span class="o">=</span> <span class="bp">False</span>

<span class="c1"># Fonts
</span><span class="n">font</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">font</span><span class="p">.</span><span class="n">Font</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="creating-obstacles">Creating Obstacles</h2>
<p>We define a function to create new obstacles. Obstacles consist of two rectangles (top and bottom) with a gap in between for the helicopter to pass through.</p>

<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create_obstacle</span><span class="p">():</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="n">HEIGHT</span> <span class="o">-</span> <span class="mi">100</span> <span class="o">-</span> <span class="n">OBSTACLE_GAP</span><span class="p">)</span>
    <span class="n">top_rect</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">Rect</span><span class="p">(</span><span class="n">WIDTH</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">OBSTACLE_WIDTH</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="n">bottom_rect</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">Rect</span><span class="p">(</span><span class="n">WIDTH</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">OBSTACLE_GAP</span><span class="p">,</span> <span class="n">OBSTACLE_WIDTH</span><span class="p">,</span> <span class="n">HEIGHT</span> <span class="o">-</span> <span class="p">(</span><span class="n">y</span> <span class="o">+</span> <span class="n">OBSTACLE_GAP</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">top_rect</span><span class="p">,</span> <span class="n">bottom_rect</span>

</code></pre></div></div>

<h2 id="drawing-the-helicopter">Drawing the Helicopter</h2>
<p>The draw_helicopter function renders the helicopter on the screen. The helicopter consists of several shapes, including an ellipse for the body, rectangles for the tail and landing skids, and more.</p>
<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">draw_helicopter</span><span class="p">(</span><span class="n">rect</span><span class="p">):</span>
    <span class="c1"># Body
</span>    <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">ellipse</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">RED</span><span class="p">,</span> <span class="n">rect</span><span class="p">)</span>
    
    <span class="c1"># Cockpit window
</span>    <span class="n">cockpit_rect</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">Rect</span><span class="p">(</span><span class="n">rect</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="mi">14</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>  <span class="c1"># Adjusted for size change
</span>    <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">ellipse</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">BLUE</span><span class="p">,</span> <span class="n">cockpit_rect</span><span class="p">)</span>
    
    <span class="c1"># Top rotor (oval-shaped with rotor block)
</span>    <span class="n">top_rotor_rect</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">Rect</span><span class="p">(</span><span class="n">rect</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="mi">33</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="mi">8</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">width</span> <span class="o">+</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>  <span class="c1"># Adjusted for size change
</span>    <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">ellipse</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">SKY_BLUE</span><span class="p">,</span> <span class="n">top_rotor_rect</span><span class="p">)</span>
    <span class="n">rotor_block_rect</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">Rect</span><span class="p">(</span><span class="n">rect</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">rect</span><span class="p">.</span><span class="n">width</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>  <span class="c1"># Adjusted for size change
</span>    <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">BLACK</span><span class="p">,</span> <span class="n">rotor_block_rect</span><span class="p">)</span>  <span class="c1"># Changed propeller color
</span>    
    <span class="c1"># Tail
</span>    <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">GREY</span><span class="p">,</span> <span class="p">(</span><span class="n">rect</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="mi">28</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">rect</span><span class="p">.</span><span class="n">height</span> <span class="o">//</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span>  <span class="c1"># Adjusted for size change
</span>    
    <span class="c1"># Tail rotor
</span>    <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">SKY_BLUE</span><span class="p">,</span> <span class="p">(</span><span class="n">rect</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="mi">35</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">rect</span><span class="p">.</span><span class="n">height</span> <span class="o">//</span> <span class="mi">4</span> <span class="o">-</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">14</span><span class="p">))</span>  <span class="c1"># Adjusted for size change
</span>    
    <span class="c1"># Landing skids
</span>    <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">BLACK</span><span class="p">,</span> <span class="p">(</span><span class="n">rect</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="mi">7</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">rect</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="mi">3</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>  <span class="c1"># Adjusted for size change
</span>    <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">BLACK</span><span class="p">,</span> <span class="p">(</span><span class="n">rect</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">rect</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>  <span class="c1"># Adjusted for size change
</span>    <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">BLACK</span><span class="p">,</span> <span class="p">(</span><span class="n">rect</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">rect</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="mi">7</span><span class="p">,</span> <span class="n">rect</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">rect</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>  <span class="c1"># Adjusted for size change
</span></code></pre></div></div>

<h2 id="main-game-loop">Main Game Loop</h2>
<p>The main game loop handles the game logic, including updating the helicopter‚Äôs position, generating obstacles, detecting collisions, and rendering everything on the screen.</p>

<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Main game loop
</span><span class="n">clock</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">time</span><span class="p">.</span><span class="n">Clock</span><span class="p">()</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">clock</span><span class="p">.</span><span class="n">tick</span><span class="p">(</span><span class="n">FPS</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">pygame</span><span class="p">.</span><span class="n">event</span><span class="p">.</span><span class="n">get</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">pygame</span><span class="p">.</span><span class="n">QUIT</span><span class="p">:</span>
            <span class="n">pygame</span><span class="p">.</span><span class="n">quit</span><span class="p">()</span>
            <span class="nb">exit</span><span class="p">()</span>

    <span class="n">keys</span> <span class="o">=</span> <span class="n">pygame</span><span class="p">.</span><span class="n">key</span><span class="p">.</span><span class="n">get_pressed</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">keys</span><span class="p">[</span><span class="n">pygame</span><span class="p">.</span><span class="n">K_UP</span><span class="p">]:</span>
        <span class="n">velocity</span> <span class="o">=</span> <span class="n">UPWARD_SPEED</span>
    <span class="k">elif</span> <span class="n">keys</span><span class="p">[</span><span class="n">pygame</span><span class="p">.</span><span class="n">K_DOWN</span><span class="p">]:</span>
        <span class="n">velocity</span> <span class="o">=</span> <span class="n">DOWNWARD_SPEED</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">velocity</span> <span class="o">+=</span> <span class="n">GRAVITY</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">game_over</span><span class="p">:</span>
        <span class="c1"># Apply gravity and control
</span>        <span class="n">helicopter_rect</span><span class="p">.</span><span class="n">y</span> <span class="o">+=</span> <span class="n">velocity</span>
        
        <span class="c1"># Check for collisions with screen boundaries
</span>        <span class="k">if</span> <span class="n">helicopter_rect</span><span class="p">.</span><span class="n">top</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">helicopter_rect</span><span class="p">.</span><span class="n">bottom</span> <span class="o">&gt;</span> <span class="n">HEIGHT</span><span class="p">:</span>
            <span class="n">game_over</span> <span class="o">=</span> <span class="bp">True</span>
        
        <span class="c1"># Move and create obstacles
</span>        <span class="k">for</span> <span class="n">obstacle</span> <span class="ow">in</span> <span class="n">obstacles</span><span class="p">:</span>
            <span class="n">obstacle</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">-=</span> <span class="n">OBSTACLE_SPEED</span>
            <span class="n">obstacle</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">x</span> <span class="o">-=</span> <span class="n">OBSTACLE_SPEED</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">obstacles</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">obstacles</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">WIDTH</span> <span class="o">-</span> <span class="mi">300</span><span class="p">:</span>
            <span class="n">obstacles</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">create_obstacle</span><span class="p">())</span>
        <span class="k">if</span> <span class="n">obstacles</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">&lt;</span> <span class="o">-</span><span class="n">OBSTACLE_WIDTH</span><span class="p">:</span>
            <span class="n">obstacles</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
            <span class="n">score</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="c1"># Check for collisions with obstacles
</span>        <span class="k">for</span> <span class="n">top_rect</span><span class="p">,</span> <span class="n">bottom_rect</span> <span class="ow">in</span> <span class="n">obstacles</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">helicopter_rect</span><span class="p">.</span><span class="n">colliderect</span><span class="p">(</span><span class="n">top_rect</span><span class="p">)</span> <span class="ow">or</span> <span class="n">helicopter_rect</span><span class="p">.</span><span class="n">colliderect</span><span class="p">(</span><span class="n">bottom_rect</span><span class="p">):</span>
                <span class="n">game_over</span> <span class="o">=</span> <span class="bp">True</span>
    
    <span class="c1"># Draw everything
</span>    <span class="n">screen</span><span class="p">.</span><span class="n">fill</span><span class="p">(</span><span class="n">WHITE</span><span class="p">)</span>
    <span class="n">draw_helicopter</span><span class="p">(</span><span class="n">helicopter_rect</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">top_rect</span><span class="p">,</span> <span class="n">bottom_rect</span> <span class="ow">in</span> <span class="n">obstacles</span><span class="p">:</span>
        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">top_rect</span><span class="p">)</span>
        <span class="n">pygame</span><span class="p">.</span><span class="n">draw</span><span class="p">.</span><span class="n">rect</span><span class="p">(</span><span class="n">screen</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">bottom_rect</span><span class="p">)</span>
    
    <span class="c1"># Display score
</span>    <span class="n">score_text</span> <span class="o">=</span> <span class="n">font</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="sa">f</span><span class="s">"Score: </span><span class="si">{</span><span class="n">score</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="n">BLACK</span><span class="p">)</span>
    <span class="n">screen</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">score_text</span><span class="p">,</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
    
    <span class="k">if</span> <span class="n">game_over</span><span class="p">:</span>
        <span class="n">game_over_text</span> <span class="o">=</span> <span class="n">font</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="s">"Game Over! Press R to Restart! Fly with Arrow Keys (Up/Down)"</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="n">BLACK</span><span class="p">)</span>
        <span class="n">screen</span><span class="p">.</span><span class="n">blit</span><span class="p">(</span><span class="n">game_over_text</span><span class="p">,</span> <span class="p">(</span><span class="n">WIDTH</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">-</span> <span class="n">game_over_text</span><span class="p">.</span><span class="n">get_width</span><span class="p">()</span> <span class="o">//</span> <span class="mi">2</span><span class="p">,</span> <span class="n">HEIGHT</span> <span class="o">//</span> <span class="mi">2</span><span class="p">))</span>
    
    <span class="n">pygame</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">flip</span><span class="p">()</span>

</code></pre></div></div>
<h2 id="restarting-the-game">Restarting the Game</h2>
<p>We add logic to restart the game when the ‚ÄòR‚Äô key is pressed:</p>

<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="c1"># Restart game on pressing 'R'
</span>    <span class="k">if</span> <span class="n">game_over</span> <span class="ow">and</span> <span class="n">keys</span><span class="p">[</span><span class="n">pygame</span><span class="p">.</span><span class="n">K_r</span><span class="p">]:</span>
        <span class="n">helicopter_rect</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">HEIGHT</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="n">velocity</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">obstacles</span><span class="p">.</span><span class="n">clear</span><span class="p">()</span>
        <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">game_over</span> <span class="o">=</span> <span class="bp">False</span>
</code></pre></div></div>

<h1 id="conclusion">Conclusion</h1>
<p>Congratulations! You have created a simple helicopter game using Pygame. This tutorial covered the basics of setting up a game window, handling user input, rendering graphics, and managing game states. With these foundations, you can further enhance the game by adding new features such as sound effects, advanced graphics, and more complex obstacle patterns.</p>]]></content><author><name>PyShine Team</name></author><category term="Python" /><category term="Pygame" /><category term="game development" /><category term="copter game" /><category term="tutorial" /><summary type="html"><![CDATA[make a copter flying game in Python and PyGame]]></summary></entry><entry><title type="html">Let‚Äôs build a simple ‚Äúword game inspired by Scrabble‚Äù</title><link href="https://www.pyshine.com/Make-a-Word-Game/" rel="alternate" type="text/html" title="Let‚Äôs build a simple ‚Äúword game inspired by Scrabble‚Äù" /><published>2024-05-30T00:00:00+00:00</published><updated>2024-05-30T00:00:00+00:00</updated><id>https://www.pyshine.com/Make-a-Word-Game</id><content type="html" xml:base="https://www.pyshine.com/Make-a-Word-Game/"><![CDATA[<p>In this tutorial, we‚Äôll create a simple word game inspired by Scrabble that you can play via the command line. The game will allow two players to take turns forming words from a set of randomly chosen letters. The goal is to score the highest points by creating valid words.</p>

<h1 id="step-1-setting-up-the-environment">Step 1: Setting Up the Environment</h1>
<p>First, ensure you have Python installed on your machine. You can download Python from python.org.</p>

<h1 id="step-2-importing-necessary-libraries">Step 2: Importing Necessary Libraries</h1>
<p>We will use the random library to generate random letters and string to access a list of alphabets.</p>

<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">string</span>
</code></pre></div></div>

<h1 id="step-3-creating-the-game-logic">Step 3: Creating the Game Logic</h1>
<p>Generate Random Letters: We‚Äôll start by generating a list of random letters for players to use.</p>

<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">generate_letters</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">7</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">random</span><span class="p">.</span><span class="n">choices</span><span class="p">(</span><span class="n">string</span><span class="p">.</span><span class="n">ascii_uppercase</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="n">n</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="scoring-system">Scoring System:</h2>

<p>Define a scoring system similar to Scrabble.</p>

<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scrabble_scores</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'A'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'B'</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">'C'</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">'D'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">'E'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'F'</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s">'G'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">'H'</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="s">'I'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'J'</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="s">'K'</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s">'L'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'M'</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">'N'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'O'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'P'</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="s">'Q'</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s">'R'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'S'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'T'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'U'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'V'</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s">'W'</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s">'X'</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="s">'Y'</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s">'Z'</span><span class="p">:</span> <span class="mi">10</span>
<span class="p">}</span>

<span class="k">def</span> <span class="nf">calculate_score</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">scrabble_scores</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">letter</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="n">word</span><span class="p">.</span><span class="n">upper</span><span class="p">())</span>
</code></pre></div></div>

<h2 id="checking-word-validity">Checking Word Validity:</h2>

<p>For simplicity, we‚Äôll assume all user-entered words are valid English words. In a more robust implementation, you could use a dictionary API or a word list.</p>

<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">is_valid_word</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">available_letters</span><span class="p">):</span>
    <span class="n">available_letters</span> <span class="o">=</span> <span class="n">available_letters</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">letter</span><span class="p">.</span><span class="n">upper</span><span class="p">()</span> <span class="ow">in</span> <span class="n">available_letters</span><span class="p">:</span>
            <span class="n">available_letters</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">letter</span><span class="p">.</span><span class="n">upper</span><span class="p">())</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">True</span>
</code></pre></div></div>

<h1 id="step-4-main-game-loop">Step 4: Main Game Loop</h1>

<p>The game will run in a loop, allowing two players to take turns.</p>

<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">play_game</span><span class="p">():</span>
    <span class="n">player_scores</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
    <span class="n">turn</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">letters</span> <span class="o">=</span> <span class="n">generate_letters</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Player </span><span class="si">{</span><span class="n">turn</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="s">'s turn"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Available letters:"</span><span class="p">,</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">letters</span><span class="p">))</span>
        
        <span class="n">word</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter a word (or 'q' to quit): "</span><span class="p">).</span><span class="n">upper</span><span class="p">()</span>
        
        <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s">'Q'</span><span class="p">:</span>
            <span class="k">break</span>
        
        <span class="k">if</span> <span class="n">is_valid_word</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">letters</span><span class="p">):</span>
            <span class="n">score</span> <span class="o">=</span> <span class="n">calculate_score</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
            <span class="n">player_scores</span><span class="p">[</span><span class="n">turn</span><span class="p">]</span> <span class="o">+=</span> <span class="n">score</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Valid word! Score: </span><span class="si">{</span><span class="n">score</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Invalid word or letters not in available set."</span><span class="p">)</span>
        
        <span class="n">turn</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">turn</span>  <span class="c1"># Switch turn
</span>        
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Scores: Player 1 - </span><span class="si">{</span><span class="n">player_scores</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s">, Player 2 - </span><span class="si">{</span><span class="n">player_scores</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">()</span>

    <span class="k">print</span><span class="p">(</span><span class="s">"Game Over"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Final Scores: Player 1 - </span><span class="si">{</span><span class="n">player_scores</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s">, Player 2 - </span><span class="si">{</span><span class="n">player_scores</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">play_game</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="step-5-running-the-game">Step 5: Running the Game</h1>
<p>To play the game, save the above code to a file named word_game.py and run it from your command line:</p>

<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python</span> <span class="n">word_game</span><span class="p">.</span><span class="n">py</span>
</code></pre></div></div>

<p>You‚Äôve now created a simple command-line word game inspired by Scrabble. Players can generate letters, form words, and keep track of their scores. This basic implementation can be expanded with features like word validation using a dictionary API, more complex scoring systems, and enhanced user interfaces. Enjoy your game!
Lets see how it works:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>word_game.py
Player 1's turn
Available letters: V K X N M G O
Enter a word (or 'q' to quit): GO
Valid word! Score: 3
Scores: Player 1 - 3, Player 2 - 0

Player 2's turn
Available letters: R U Z Q Q U C
Enter a word (or 'q' to quit): R
Valid word! Score: 1
Scores: Player 1 - 3, Player 2 - 1

Player 1's turn
Available letters: U M B V Q C S
Enter a word (or 'q' to quit): BUS
Valid word! Score: 5
Scores: Player 1 - 8, Player 2 - 1

Player 2's turn
Available letters: S C A F F Q J
Enter a word (or 'q' to quit): SCAFF
Valid word! Score: 13
Scores: Player 1 - 8, Player 2 - 14

Player 1's turn
Available letters: N Y H P D M A
Enter a word (or 'q' to quit): MAN
Valid word! Score: 5
Scores: Player 1 - 13, Player 2 - 14

Player 2's turn
Available letters: Y B V U N V G
Enter a word (or 'q' to quit): BUG
Valid word! Score: 6
Scores: Player 1 - 13, Player 2 - 20

Player 1's turn
Available letters: Q A Q D C O U
Enter a word (or 'q' to quit): DO
Valid word! Score: 3
Scores: Player 1 - 16, Player 2 - 20

Player 2's turn
Available letters: V P Q I B K M
Enter a word (or 'q' to quit): VIM
Valid word! Score: 8
Scores: Player 1 - 16, Player 2 - 28

Player 1's turn
Available letters: V X F K R R D
Enter a word (or 'q' to quit): q
Game Over
Final Scores: Player 1 - 16, Player 2 - 28

</code></pre></div></div>

<p>Emm, although Player 2 wins with 28 score but something is still missing. How about we add some kind of Dictionary so that the
word is checked for its correctness in English and validity as well. To enhance our command-line word game by verifying the correctness of user-entered words, we can use an English dictionary library. One such library is PyDictionary, which can check if a word exists in the dictionary.</p>

<p>First, you‚Äôll need to install the PyDictionary library. You can install it using pip:</p>
<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pip</span> <span class="n">install</span> <span class="n">PyDictionary</span>
</code></pre></div></div>

<p>Now, let‚Äôs modify our game to include a word validation step using PyDictionary. Here‚Äôs the complete code with the new functionality:</p>

<h3 id="word_gamepy">word_game.py</h3>

<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">string</span>
<span class="kn">from</span> <span class="nn">PyDictionary</span> <span class="kn">import</span> <span class="n">PyDictionary</span>

<span class="c1"># Initialize the dictionary
</span><span class="n">dictionary</span> <span class="o">=</span> <span class="n">PyDictionary</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">generate_letters</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">7</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">random</span><span class="p">.</span><span class="n">choices</span><span class="p">(</span><span class="n">string</span><span class="p">.</span><span class="n">ascii_uppercase</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="n">n</span><span class="p">)</span>

<span class="n">scrabble_scores</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'A'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'B'</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">'C'</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">'D'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">'E'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'F'</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s">'G'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">'H'</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
    <span class="s">'I'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'J'</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="s">'K'</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s">'L'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'M'</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">'N'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'O'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'P'</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
    <span class="s">'Q'</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s">'R'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'S'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'T'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'U'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'V'</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s">'W'</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s">'X'</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="s">'Y'</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="s">'Z'</span><span class="p">:</span> <span class="mi">10</span>
<span class="p">}</span>

<span class="k">def</span> <span class="nf">calculate_score</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">scrabble_scores</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">letter</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="n">word</span><span class="p">.</span><span class="n">upper</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">is_valid_word</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">available_letters</span><span class="p">):</span>
    <span class="n">available_letters</span> <span class="o">=</span> <span class="n">available_letters</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">letter</span><span class="p">.</span><span class="n">upper</span><span class="p">()</span> <span class="ow">in</span> <span class="n">available_letters</span><span class="p">:</span>
            <span class="n">available_letters</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">letter</span><span class="p">.</span><span class="n">upper</span><span class="p">())</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">True</span>

<span class="k">def</span> <span class="nf">word_exists</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
    <span class="n">meaning</span> <span class="o">=</span> <span class="n">dictionary</span><span class="p">.</span><span class="n">meaning</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">meaning</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">play_game</span><span class="p">():</span>
    <span class="n">player_scores</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>
    <span class="n">turn</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">letters</span> <span class="o">=</span> <span class="n">generate_letters</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Player </span><span class="si">{</span><span class="n">turn</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="s">'s turn"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Available letters:"</span><span class="p">,</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">letters</span><span class="p">))</span>
        
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">word</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter a word (or 'q' to quit): "</span><span class="p">).</span><span class="n">upper</span><span class="p">()</span>
            
            <span class="k">if</span> <span class="n">word</span> <span class="o">==</span> <span class="s">'Q'</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">"Game Over"</span><span class="p">)</span>
                <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Final Scores: Player 1 - </span><span class="si">{</span><span class="n">player_scores</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s">, Player 2 - </span><span class="si">{</span><span class="n">player_scores</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
                <span class="k">return</span>
            
            <span class="k">if</span> <span class="n">is_valid_word</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">letters</span><span class="p">)</span> <span class="ow">and</span> <span class="n">word_exists</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
                <span class="n">score</span> <span class="o">=</span> <span class="n">calculate_score</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
                <span class="n">player_scores</span><span class="p">[</span><span class="n">turn</span><span class="p">]</span> <span class="o">+=</span> <span class="n">score</span>
                <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Valid word! Score: </span><span class="si">{</span><span class="n">score</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
                <span class="k">break</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">"Invalid word or letters not in available set. Please try again."</span><span class="p">)</span>
        
        <span class="n">turn</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">turn</span>  <span class="c1"># Switch turn
</span>        
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Scores: Player 1 - </span><span class="si">{</span><span class="n">player_scores</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">}</span><span class="s">, Player 2 - </span><span class="si">{</span><span class="n">player_scores</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">play_game</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="explanation">Explanation:</h1>
<p>PyDictionary Integration: We added the PyDictionary library to check if the entered word exists in the dictionary.
word_exists Function: This function uses PyDictionary to verify if a word has a valid meaning.
Validation Loop: Inside the main game loop, we now have a nested loop to repeatedly ask the player for a valid word if the entered word is invalid.
Running the Game
Ensure you have PyDictionary installed, then run the game script as before:</p>

<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python</span> <span class="n">word_game</span><span class="p">.</span><span class="n">py</span>
</code></pre></div></div>

<p>Now, the game will prompt players to re-enter words if they are not valid English words, enhancing the overall gameplay experience. Enjoy your improved word game!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python word_game.py
Player 1's turn
Available letters: M Z V J W N P
Enter a word (or 'q' to quit): MJP
Error: The Following Error occured: list index out of range
Invalid word or letters not in available set. Please try again.
Enter a word (or 'q' to quit): VJ
Error: The Following Error occured: list index out of range
Invalid word or letters not in available set. Please try again.
Enter a word (or 'q' to quit): N
Valid word! Score: 1
Scores: Player 1 - 1, Player 2 - 0

Player 2's turn
Available letters: E I Y I F J B
Enter a word (or 'q' to quit): BI
Valid word! Score: 4
Scores: Player 1 - 1, Player 2 - 4

Player 1's turn
Available letters: M Y H V V G Y
Enter a word (or 'q' to quit): H
Valid word! Score: 4
Scores: Player 1 - 5, Player 2 - 4

Player 2's turn
Available letters: C O B W X B C
Enter a word (or 'q' to quit): COW
Valid word! Score: 8
Scores: Player 1 - 5, Player 2 - 12

Player 1's turn
Available letters: X X X Q T P R
Enter a word (or 'q' to quit): X
Valid word! Score: 8
Scores: Player 1 - 13, Player 2 - 12

Player 2's turn
Available letters: J N O Z Z T S
Enter a word (or 'q' to quit): NOT
Valid word! Score: 3
Scores: Player 1 - 13, Player 2 - 15

Player 1's turn
Available letters: S U T G A G H
Enter a word (or 'q' to quit): HUT
Valid word! Score: 6
Scores: Player 1 - 19, Player 2 - 15

Player 2's turn
Available letters: C T U S P I A
Enter a word (or 'q' to quit): CUPS
Error: The Following Error occured: list index out of range
Invalid word or letters not in available set. Please try again.
Enter a word (or 'q' to quit): CUP
Valid word! Score: 7
Scores: Player 1 - 19, Player 2 - 22

Player 1's turn
Available letters: Y Y D K Q R B
Enter a word (or 'q' to quit): K
Valid word! Score: 5
Scores: Player 1 - 24, Player 2 - 22

Player 2's turn
Available letters: V Q S I Z B H
Enter a word (or 'q' to quit): H
Valid word! Score: 4
Scores: Player 1 - 24, Player 2 - 26

Player 1's turn
Available letters: K F W S T W C
Enter a word (or 'q' to quit): F
Valid word! Score: 4
Scores: Player 1 - 28, Player 2 - 26

Player 2's turn
Available letters: U Y Y R U J X
Enter a word (or 'q' to quit): R
Valid word! Score: 1
Scores: Player 1 - 28, Player 2 - 27

Player 1's turn
Available letters: U S G D A G R
Enter a word (or 'q' to quit): DUG
Valid word! Score: 5
Scores: Player 1 - 33, Player 2 - 27

Player 2's turn
Available letters: U H Y N P O C
Enter a word (or 'q' to quit): NO
Valid word! Score: 2
Scores: Player 1 - 33, Player 2 - 29

Player 1's turn
Available letters: M R T F W V D
Enter a word (or 'q' to quit): q
Game Over
Final Scores: Player 1 - 33, Player 2 - 29
</code></pre></div></div>]]></content><author><name>PyShine Team</name></author><category term="Python" /><category term="Scrabble" /><category term="word game" /><category term="game development" /><category term="tutorial" /><summary type="html"><![CDATA[make a scrabble game in python]]></summary></entry><entry><title type="html">Let‚Äôs build a simple ‚ÄúBattleship‚Äù game</title><link href="https://www.pyshine.com/Make-a-battleship-game/" rel="alternate" type="text/html" title="Let‚Äôs build a simple ‚ÄúBattleship‚Äù game" /><published>2024-05-30T00:00:00+00:00</published><updated>2024-05-30T00:00:00+00:00</updated><id>https://www.pyshine.com/Make-a-battleship-game</id><content type="html" xml:base="https://www.pyshine.com/Make-a-battleship-game/"><![CDATA[<p>In this tutorial, we‚Äôll create a simple Battleship game that you can play via the command line. Battleship is a classic two-player game where players take turns guessing the locations of the opponent‚Äôs ships on a grid.</p>

<h1 id="step-1-setting-up-the-environment">Step 1: Setting Up the Environment</h1>
<p>First, ensure you have Python installed on your machine. You can download Python from python.org.</p>

<h1 id="step-2-defining-the-game-board">Step 2: Defining the Game Board</h1>
<p>We‚Äôll start by defining the game board and the basic structure of the game. Each player will have a 5x5 grid where they can place their ships and make guesses.</p>

<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">random</span>

<span class="k">def</span> <span class="nf">create_board</span><span class="p">(</span><span class="n">size</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">[[</span><span class="s">'~'</span><span class="p">]</span> <span class="o">*</span> <span class="n">size</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">size</span><span class="p">)]</span>

<span class="k">def</span> <span class="nf">print_board</span><span class="p">(</span><span class="n">board</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">board</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">row</span><span class="p">))</span>
    <span class="k">print</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">place_ships</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">num_ships</span><span class="p">):</span>
    <span class="n">ships</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">ships</span> <span class="o">&lt;</span> <span class="n">num_ships</span><span class="p">:</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="s">'~'</span><span class="p">:</span>
            <span class="n">board</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="s">'S'</span>
            <span class="n">ships</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">def</span> <span class="nf">get_user_guess</span><span class="p">():</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">guess</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter your guess (row and column, e.g., 2 3): "</span><span class="p">).</span><span class="n">split</span><span class="p">()</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">guess</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">and</span> <span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">isdigit</span><span class="p">()</span> <span class="ow">and</span> <span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">isdigit</span><span class="p">():</span>
            <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Invalid input. Please enter two numbers separated by a space."</span><span class="p">)</span>

</code></pre></div></div>

<h1 id="step-3-setting-up-the-game">Step 3: Setting Up the Game</h1>
<p>Next, we‚Äôll set up the game, including the boards for both players, and allow players to place their ships.</p>

<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">setup_game</span><span class="p">(</span><span class="n">board_size</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">num_ships</span><span class="o">=</span><span class="mi">3</span><span class="p">):</span>
    <span class="n">player1_board</span> <span class="o">=</span> <span class="n">create_board</span><span class="p">(</span><span class="n">board_size</span><span class="p">)</span>
    <span class="n">player2_board</span> <span class="o">=</span> <span class="n">create_board</span><span class="p">(</span><span class="n">board_size</span><span class="p">)</span>
    
    <span class="k">print</span><span class="p">(</span><span class="s">"Player 1, place your ships:"</span><span class="p">)</span>
    <span class="n">place_ships</span><span class="p">(</span><span class="n">player1_board</span><span class="p">,</span> <span class="n">num_ships</span><span class="p">)</span>
    <span class="n">print_board</span><span class="p">(</span><span class="n">player1_board</span><span class="p">)</span>
    
    <span class="k">print</span><span class="p">(</span><span class="s">"Player 2, place your ships:"</span><span class="p">)</span>
    <span class="n">place_ships</span><span class="p">(</span><span class="n">player2_board</span><span class="p">,</span> <span class="n">num_ships</span><span class="p">)</span>
    <span class="n">print_board</span><span class="p">(</span><span class="n">player2_board</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">player1_board</span><span class="p">,</span> <span class="n">player2_board</span>
</code></pre></div></div>

<h1 id="step-4-main-game-loop">Step 4: Main Game Loop</h1>
<p>We‚Äôll create the main game loop where players take turns guessing the locations of the opponent‚Äôs ships. We‚Äôll also keep track of the number of ships each player has left.</p>

<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">play_game</span><span class="p">():</span>
    <span class="n">board_size</span> <span class="o">=</span> <span class="mi">5</span>
    <span class="n">num_ships</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="n">player1_board</span><span class="p">,</span> <span class="n">player2_board</span> <span class="o">=</span> <span class="n">setup_game</span><span class="p">(</span><span class="n">board_size</span><span class="p">,</span> <span class="n">num_ships</span><span class="p">)</span>
    <span class="n">player1_guesses</span> <span class="o">=</span> <span class="n">create_board</span><span class="p">(</span><span class="n">board_size</span><span class="p">)</span>
    <span class="n">player2_guesses</span> <span class="o">=</span> <span class="n">create_board</span><span class="p">(</span><span class="n">board_size</span><span class="p">)</span>
    
    <span class="n">player1_ships</span> <span class="o">=</span> <span class="n">num_ships</span>
    <span class="n">player2_ships</span> <span class="o">=</span> <span class="n">num_ships</span>
    <span class="n">turn</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="k">while</span> <span class="n">player1_ships</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">player2_ships</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">turn</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Player 1's turn"</span><span class="p">)</span>
            <span class="n">print_board</span><span class="p">(</span><span class="n">player1_guesses</span><span class="p">)</span>
            <span class="n">guess</span> <span class="o">=</span> <span class="n">get_user_guess</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">player2_board</span><span class="p">[</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">==</span> <span class="s">'S'</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">"Hit!"</span><span class="p">)</span>
                <span class="n">player1_guesses</span><span class="p">[</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="s">'X'</span>
                <span class="n">player2_board</span><span class="p">[</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="s">'X'</span>
                <span class="n">player2_ships</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">"Miss."</span><span class="p">)</span>
                <span class="n">player1_guesses</span><span class="p">[</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="s">'O'</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Player 2's turn"</span><span class="p">)</span>
            <span class="n">print_board</span><span class="p">(</span><span class="n">player2_guesses</span><span class="p">)</span>
            <span class="n">guess</span> <span class="o">=</span> <span class="n">get_user_guess</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">player1_board</span><span class="p">[</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">==</span> <span class="s">'S'</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">"Hit!"</span><span class="p">)</span>
                <span class="n">player2_guesses</span><span class="p">[</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="s">'X'</span>
                <span class="n">player1_board</span><span class="p">[</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="s">'X'</span>
                <span class="n">player1_ships</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">"Miss."</span><span class="p">)</span>
                <span class="n">player2_guesses</span><span class="p">[</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="s">'O'</span>
        
        <span class="n">turn</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="k">if</span> <span class="n">player1_ships</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Player 2 wins!"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Player 1 wins!"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">play_game</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="explanation">Explanation:</h1>
<h2 id="create_board-function">create_board Function:</h2>
<p>This function creates an empty game board of the specified size.</p>
<h2 id="print_board-function">print_board Function:</h2>
<p>This function prints the game board in a readable format.</p>
<h2 id="place_ships-function">place_ships Function:</h2>
<p>This function randomly places a specified number of ships on the board.</p>
<h2 id="get_user_guess-function">get_user_guess Function:</h2>
<p>This function prompts the player to enter their guess and validates the input.</p>
<h2 id="setup_game-function">setup_game Function:</h2>
<p>This function sets up the game by creating boards for both players and placing their ships.</p>
<h2 id="play_game-function">play_game Function:</h2>
<p>This is the main game loop where players take turns guessing the locations of the opponent‚Äôs ships. It keeps track of the number of ships each player has left and announces the winner when all of one player‚Äôs ships are sunk.</p>
<h2 id="running-the-game">Running the Game</h2>
<p>Save the code to a file named battleship.py and run it from your command line:</p>

<h1 id="complete-code">Complete code</h1>

<h3 id="battleshippy">battleship.py</h3>
<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">random</span>

<span class="k">def</span> <span class="nf">create_board</span><span class="p">(</span><span class="n">size</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">[[</span><span class="s">'~'</span><span class="p">]</span> <span class="o">*</span> <span class="n">size</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">size</span><span class="p">)]</span>

<span class="k">def</span> <span class="nf">print_board</span><span class="p">(</span><span class="n">board</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">board</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">row</span><span class="p">))</span>
    <span class="k">print</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">place_ships</span><span class="p">(</span><span class="n">board</span><span class="p">,</span> <span class="n">num_ships</span><span class="p">):</span>
    <span class="n">ships</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">ships</span> <span class="o">&lt;</span> <span class="n">num_ships</span><span class="p">:</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">board</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">board</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="s">'~'</span><span class="p">:</span>
            <span class="n">board</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="s">'S'</span>
            <span class="n">ships</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">def</span> <span class="nf">get_user_guess</span><span class="p">():</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">guess</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter your guess (row and column, e.g., 2 3): "</span><span class="p">).</span><span class="n">split</span><span class="p">()</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">guess</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">and</span> <span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">isdigit</span><span class="p">()</span> <span class="ow">and</span> <span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">isdigit</span><span class="p">():</span>
            <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Invalid input. Please enter two numbers separated by a space."</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">setup_game</span><span class="p">(</span><span class="n">board_size</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">num_ships</span><span class="o">=</span><span class="mi">3</span><span class="p">):</span>
    <span class="n">player1_board</span> <span class="o">=</span> <span class="n">create_board</span><span class="p">(</span><span class="n">board_size</span><span class="p">)</span>
    <span class="n">player2_board</span> <span class="o">=</span> <span class="n">create_board</span><span class="p">(</span><span class="n">board_size</span><span class="p">)</span>
    
    <span class="k">print</span><span class="p">(</span><span class="s">"Player 1, place your ships:"</span><span class="p">)</span>
    <span class="n">place_ships</span><span class="p">(</span><span class="n">player1_board</span><span class="p">,</span> <span class="n">num_ships</span><span class="p">)</span>
    <span class="n">print_board</span><span class="p">(</span><span class="n">player1_board</span><span class="p">)</span>
    
    <span class="k">print</span><span class="p">(</span><span class="s">"Player 2, place your ships:"</span><span class="p">)</span>
    <span class="n">place_ships</span><span class="p">(</span><span class="n">player2_board</span><span class="p">,</span> <span class="n">num_ships</span><span class="p">)</span>
    <span class="n">print_board</span><span class="p">(</span><span class="n">player2_board</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">player1_board</span><span class="p">,</span> <span class="n">player2_board</span>

<span class="k">def</span> <span class="nf">play_game</span><span class="p">():</span>
    <span class="n">board_size</span> <span class="o">=</span> <span class="mi">5</span>
    <span class="n">num_ships</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="n">player1_board</span><span class="p">,</span> <span class="n">player2_board</span> <span class="o">=</span> <span class="n">setup_game</span><span class="p">(</span><span class="n">board_size</span><span class="p">,</span> <span class="n">num_ships</span><span class="p">)</span>
    <span class="n">player1_guesses</span> <span class="o">=</span> <span class="n">create_board</span><span class="p">(</span><span class="n">board_size</span><span class="p">)</span>
    <span class="n">player2_guesses</span> <span class="o">=</span> <span class="n">create_board</span><span class="p">(</span><span class="n">board_size</span><span class="p">)</span>
    
    <span class="n">player1_ships</span> <span class="o">=</span> <span class="n">num_ships</span>
    <span class="n">player2_ships</span> <span class="o">=</span> <span class="n">num_ships</span>
    <span class="n">turn</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="k">while</span> <span class="n">player1_ships</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">player2_ships</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">turn</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Player 1's turn"</span><span class="p">)</span>
            <span class="n">print_board</span><span class="p">(</span><span class="n">player1_guesses</span><span class="p">)</span>
            <span class="n">guess</span> <span class="o">=</span> <span class="n">get_user_guess</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">player2_board</span><span class="p">[</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">==</span> <span class="s">'S'</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">"Hit!"</span><span class="p">)</span>
                <span class="n">player1_guesses</span><span class="p">[</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="s">'X'</span>
                <span class="n">player2_board</span><span class="p">[</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="s">'X'</span>
                <span class="n">player2_ships</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">"Miss."</span><span class="p">)</span>
                <span class="n">player1_guesses</span><span class="p">[</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="s">'O'</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Player 2's turn"</span><span class="p">)</span>
            <span class="n">print_board</span><span class="p">(</span><span class="n">player2_guesses</span><span class="p">)</span>
            <span class="n">guess</span> <span class="o">=</span> <span class="n">get_user_guess</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">player1_board</span><span class="p">[</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">==</span> <span class="s">'S'</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">"Hit!"</span><span class="p">)</span>
                <span class="n">player2_guesses</span><span class="p">[</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="s">'X'</span>
                <span class="n">player1_board</span><span class="p">[</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="s">'X'</span>
                <span class="n">player1_ships</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">"Miss."</span><span class="p">)</span>
                <span class="n">player2_guesses</span><span class="p">[</span><span class="n">guess</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="n">guess</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="s">'O'</span>
        
        <span class="n">turn</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="k">if</span> <span class="n">player1_ships</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Player 2 wins!"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Player 1 wins!"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">play_game</span><span class="p">()</span>

</code></pre></div></div>

<style>
  .copy-code-button {
	box-shadow:inset 0px 1px 0px 0px #bbdaf7;
	background:linear-gradient(to bottom, #79bbff 5%, #378de5 100%);
	background-color:#79bbff;
	border-radius:6px;
	border:1px solid #84bbf3;
	display:inline-block;
	cursor:pointer;
	color:#ffffff;
	font-family:Arial;
	font-size:15px;
	font-weight:bold;
	padding:6px 24px;
	text-decoration:none;
	text-shadow:0px 1px 0px #528ecc;
}
.copy-code-button:hover {
	background:linear-gradient(to bottom, #378de5 5%, #79bbff 100%);
	background-color:#378de5;
}
.copy-code-button:active {
	position:relative;
	top:1px;
}
</style>

<div class="code-header">
  <button class="copy-code-button">
    Copy code to clipboard
  </button>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python</span> <span class="n">battleship</span><span class="p">.</span><span class="n">py</span>
</code></pre></div></div>
<p>Conclusion
You‚Äôve now created a simple command-line Battleship game in Python. Players can place ships, take turns guessing, and the game will announce the winner when all ships are sunk. This basic implementation can be expanded with features like different board sizes, more ships, and improved user interfaces. Enjoy your game!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python battleship.py

Player 1, place your ships:
~ ~ ~ ~ ~
~ ~ ~ S S
~ S ~ ~ ~
~ ~ ~ ~ ~
~ ~ ~ ~ ~

Player 2, place your ships:
~ ~ ~ ~ ~
~ ~ ~ ~ ~
~ ~ S ~ ~
~ S ~ ~ ~
~ S ~ ~ ~

Player 1's turn
~ ~ ~ ~ ~
~ ~ ~ ~ ~
~ ~ ~ ~ ~
~ ~ ~ ~ ~
~ ~ ~ ~ ~

Enter your guess (row and column, e.g., 2 3): 2 2
Hit!
Player 2's turn
~ ~ ~ ~ ~
~ ~ ~ ~ ~
~ ~ ~ ~ ~
~ ~ ~ ~ ~
~ ~ ~ ~ ~

Enter your guess (row and column, e.g., 2 3): 1 1
Miss.
Player 1's turn
~ ~ ~ ~ ~
~ ~ ~ ~ ~
~ ~ X ~ ~
~ ~ ~ ~ ~
~ ~ ~ ~ ~

Enter your guess (row and column, e.g., 2 3): 3 1
Hit!
Player 2's turn
~ ~ ~ ~ ~
~ O ~ ~ ~
~ ~ ~ ~ ~
~ ~ ~ ~ ~
~ ~ ~ ~ ~

Enter your guess (row and column, e.g., 2 3): 2 3
Miss.
Player 1's turn
~ ~ ~ ~ ~
~ ~ ~ ~ ~
~ ~ X ~ ~
~ X ~ ~ ~
~ ~ ~ ~ ~

Enter your guess (row and column, e.g., 2 3): 4 1
Hit!
Player 1 wins!

</code></pre></div></div>]]></content><author><name>PyShine Team</name></author><category term="Python" /><category term="Battleship" /><category term="game development" /><category term="command line" /><category term="tutorial" /><summary type="html"><![CDATA[make a battleship game in python]]></summary></entry></feed>